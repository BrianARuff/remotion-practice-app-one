import type { StaticFile } from 'remotion';
export type RenderDefaults = {
    jpegQuality: number;
    scale: number;
    logLevel: string;
    codec: string;
    concurrency: number;
    minConcurrency: number;
    muted: boolean;
    maxConcurrency: number;
    stillImageFormat: 'png' | 'jpeg' | 'webp' | 'pdf';
    videoImageFormat: 'png' | 'jpeg' | 'none';
    audioCodec: string | null;
    enforceAudioTrack: boolean;
    proResProfile: string;
    x264Preset: string;
    pixelFormat: string;
    audioBitrate: string | null;
    videoBitrate: string | null;
    everyNthFrame: number;
    numberOfGifLoops: number | null;
    delayRenderTimeout: number;
    disableWebSecurity: boolean;
    openGlRenderer: string | null;
    ignoreCertificateErrors: boolean;
    offthreadVideoCacheSizeInBytes: number | null;
    headless: boolean;
    colorSpace: string;
    multiProcessOnLinux: boolean;
};
declare global {
    interface Window {
        remotion_renderDefaults: RenderDefaults | undefined;
    }
}
export declare const indexHtml: ({ baseDir, editorName, inputProps, envVariables, staticHash, remotionRoot, studioServerCommand, renderQueue, numberOfAudioTags, publicFiles, includeFavicon, title, renderDefaults, publicFolderExists, }: {
    staticHash: string;
    baseDir: string;
    editorName: string | null;
    inputProps: object | null;
    envVariables?: Record<string, string> | undefined;
    remotionRoot: string;
    studioServerCommand: string | null;
    renderQueue: unknown | null;
    numberOfAudioTags: number;
    publicFiles: StaticFile[];
    publicFolderExists: string | null;
    includeFavicon: boolean;
    title: string;
    renderDefaults: RenderDefaults | undefined;
}) => string;
