"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateFfmpegArgs = void 0;
const crf_1 = require("./crf");
const get_codec_name_1 = require("./get-codec-name");
const truthy_1 = require("./truthy");
const firstEncodingStepOnly = ({ hasPreencoded, proResProfileName, pixelFormat, x264Preset, codec, crf, videoBitrate, }) => {
    if (hasPreencoded) {
        return [];
    }
    return [
        proResProfileName ? ['-profile:v', proResProfileName] : null,
        ['-pix_fmt', pixelFormat],
        // Without explicitly disabling auto-alt-ref,
        // transparent WebM generation doesn't work
        pixelFormat === 'yuva420p' ? ['-auto-alt-ref', '0'] : null,
        x264Preset ? ['-preset', x264Preset] : null,
        (0, crf_1.validateQualitySettings)({
            crf,
            videoBitrate,
            codec,
        }),
    ].filter(truthy_1.truthy);
};
const generateFfmpegArgs = ({ hasPreencoded, proResProfileName, pixelFormat, x264Preset, codec, crf, videoBitrate, colorSpace, }) => {
    const encoderName = (0, get_codec_name_1.getCodecName)(codec);
    if (encoderName === null) {
        throw new TypeError('encoderName is null: ' + JSON.stringify(codec));
    }
    const colorSpaceOptions = colorSpace === 'bt709'
        ? [
            ['-colorspace:v', 'bt709'],
            ['-color_primaries:v', 'bt709'],
            ['-color_trc:v', 'bt709'],
            ['-color_range:v', 'tv'],
        ]
        : [];
    return [
        ['-c:v', hasPreencoded ? 'copy' : encoderName],
        // -c:v is the same as -vcodec as -codec:video
        // and specified the video codec.
        ...colorSpaceOptions,
        ...firstEncodingStepOnly({
            codec,
            crf,
            hasPreencoded,
            pixelFormat,
            proResProfileName,
            videoBitrate,
            x264Preset,
        }),
    ].filter(truthy_1.truthy);
};
exports.generateFfmpegArgs = generateFfmpegArgs;
