"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocalBrowserExecutable = exports.ensureLocalBrowser = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const node_os_1 = __importDefault(require("node:os"));
const BrowserFetcher_1 = require("./browser/BrowserFetcher");
const logger_1 = require("./logger");
const getSearchPathsForProduct = () => {
    var _a;
    return [
        (_a = process.env.PUPPETEER_EXECUTABLE_PATH) !== null && _a !== void 0 ? _a : null,
        process.platform === 'darwin'
            ? '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'
            : null,
        process.platform === 'linux' ? '/usr/bin/google-chrome' : null,
        process.platform === 'linux' ? '/usr/bin/chromium-browser' : null,
        process.platform === 'linux' ? '/usr/bin/chromium' : null,
        process.platform === 'linux'
            ? '/app/.apt/usr/bin/google-chrome-stable'
            : null,
        process.platform === 'win32'
            ? 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'
            : null,
        process.platform === 'win32'
            ? 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'
            : null,
        process.platform === 'win32'
            ? node_os_1.default.homedir() +
                '\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe'
            : null,
        process.platform === 'win32'
            ? 'C:\\Program Files\\Google\\Chrome SxS\\Application\\chrome.exe'
            : null,
        process.platform === 'win32'
            ? 'C:\\Program Files (x86)\\Google\\Chrome SxS\\Application\\chrome.exe'
            : null,
        process.platform === 'win32'
            ? node_os_1.default.homedir() +
                '\\AppData\\Local\\Google\\Chrome SxS\\Application\\chrome.exe'
            : null,
    ].filter(Boolean);
};
const getLocalBrowser = () => {
    for (const p of getSearchPathsForProduct()) {
        if (node_fs_1.default.existsSync(p)) {
            return p;
        }
    }
    return null;
};
const getBrowserStatus = (browserExecutablePath) => {
    if (browserExecutablePath) {
        if (!node_fs_1.default.existsSync(browserExecutablePath)) {
            console.warn(`Browser executable was specified as '${browserExecutablePath}' but the path doesn't exist.`);
        }
        return { path: browserExecutablePath, type: 'user-defined-path' };
    }
    const localBrowser = getLocalBrowser();
    if (localBrowser !== null) {
        return { path: localBrowser, type: 'local-browser' };
    }
    const revision = (0, BrowserFetcher_1.getRevisionInfo)();
    if (revision.local && node_fs_1.default.existsSync(revision.executablePath)) {
        return { path: revision.executablePath, type: 'local-puppeteer-browser' };
    }
    return { type: 'no-browser' };
};
const ensureLocalBrowser = async ({ indent, logLevel, preferredBrowserExecutable, }) => {
    const status = getBrowserStatus(preferredBrowserExecutable);
    if (status.type === 'no-browser') {
        logger_1.Log.info('No local browser could be found. Downloading Thorium https://www.remotion.dev/docs/miscellaneous/thorium-browser');
        await (0, BrowserFetcher_1.downloadBrowser)({ indent, logLevel });
    }
};
exports.ensureLocalBrowser = ensureLocalBrowser;
const getLocalBrowserExecutable = (preferredBrowserExecutable) => {
    const status = getBrowserStatus(preferredBrowserExecutable);
    if (status.type === 'no-browser') {
        throw new TypeError('No browser found for rendering frames! Please open a GitHub issue and describe ' +
            'how you reached this error: https://github.com/remotion-dev/remotion/issues');
    }
    return status.path;
};
exports.getLocalBrowserExecutable = getLocalBrowserExecutable;
