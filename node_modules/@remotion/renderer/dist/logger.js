"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setLogLevel = exports.getLogLevel = exports.Log = exports.secondverboseTag = exports.verboseTag = exports.INDENT_TOKEN = void 0;
const chalk_1 = require("./chalk");
const is_color_supported_1 = require("./chalk/is-color-supported");
const log_level_1 = require("./log-level");
const truthy_1 = require("./truthy");
exports.INDENT_TOKEN = chalk_1.chalk.gray('â”‚');
const verboseTag = (str) => {
    return (0, is_color_supported_1.isColorSupported)() ? chalk_1.chalk.bgBlack(` ${str} `) : `[${str}]`;
};
exports.verboseTag = verboseTag;
const secondverboseTag = (str) => {
    return (0, is_color_supported_1.isColorSupported)() ? chalk_1.chalk.bgWhite(` ${str} `) : `[${str}]`;
};
exports.secondverboseTag = secondverboseTag;
exports.Log = {
    verbose: (...args) => {
        exports.Log.verboseAdvanced({ indent: false, logLevel: (0, exports.getLogLevel)() }, ...args);
    },
    verboseAdvanced: (options, ...args) => {
        if ((0, log_level_1.isEqualOrBelowLogLevel)(options.logLevel, 'verbose')) {
            return console.log(...[
                options.indent ? exports.INDENT_TOKEN : null,
                options.tag ? (0, exports.verboseTag)(options.tag) : null,
            ]
                .filter(truthy_1.truthy)
                .concat(args.map((a) => chalk_1.chalk.gray(a))));
        }
    },
    info: (...args) => {
        exports.Log.infoAdvanced({ indent: false, logLevel: (0, exports.getLogLevel)() }, ...args);
    },
    infoAdvanced: (options, ...args) => {
        return console.log(...[options.indent ? exports.INDENT_TOKEN : null].filter(truthy_1.truthy).concat(args));
    },
    warn: (...args) => {
        if ((0, log_level_1.isEqualOrBelowLogLevel)((0, exports.getLogLevel)(), 'warn')) {
            exports.Log.warnAdvanced({ indent: false, logLevel: (0, exports.getLogLevel)() }, ...args);
        }
    },
    warnAdvanced: (options, ...args) => {
        if ((0, log_level_1.isEqualOrBelowLogLevel)(options.logLevel, 'warn')) {
            return console.warn(...[options.indent ? chalk_1.chalk.yellow(exports.INDENT_TOKEN) : null]
                .filter(truthy_1.truthy)
                .concat(args.map((a) => chalk_1.chalk.yellow(a))));
        }
    },
    error: (...args) => {
        if ((0, log_level_1.isEqualOrBelowLogLevel)((0, exports.getLogLevel)(), 'error')) {
            return console.error(...args.map((a) => chalk_1.chalk.red(a)));
        }
    },
    errorAdvanced: (options, ...args) => {
        if ((0, log_level_1.isEqualOrBelowLogLevel)((0, exports.getLogLevel)(), 'error')) {
            return console.log(...[
                options.indent ? exports.INDENT_TOKEN : null,
                options.tag ? (0, exports.verboseTag)(options.tag) : null,
            ]
                .filter(truthy_1.truthy)
                .concat(args.map((a) => chalk_1.chalk.red(a))));
        }
    },
};
let logLevel = 'info';
const getLogLevel = () => {
    return logLevel;
};
exports.getLogLevel = getLogLevel;
const setLogLevel = (newLogLevel) => {
    logLevel = newLogLevel;
};
exports.setLogLevel = setLogLevel;
