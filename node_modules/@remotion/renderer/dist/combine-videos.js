"use strict";
// Combine multiple video chunks, useful for decentralized rendering
Object.defineProperty(exports, "__esModule", { value: true });
exports.combineVideos = void 0;
const node_fs_1 = require("node:fs");
const node_path_1 = require("node:path");
const audio_codec_1 = require("./audio-codec");
const call_ffmpeg_1 = require("./call-ffmpeg");
const is_audio_codec_1 = require("./is-audio-codec");
const logger_1 = require("./logger");
const parse_ffmpeg_progress_1 = require("./parse-ffmpeg-progress");
const truthy_1 = require("./truthy");
const combineVideos = async (options) => {
    var _a;
    const { files, filelistDir, output, onProgress, numberOfFrames, codec, fps, numberOfGifLoops, audioCodec, audioBitrate, } = options;
    const fileList = files.map((p) => `file '${p}'`).join('\n');
    const fileListTxt = (0, node_path_1.join)(filelistDir, 'files.txt');
    (0, node_fs_1.writeFileSync)(fileListTxt, fileList);
    const resolvedAudioCodec = audioCodec !== null && audioCodec !== void 0 ? audioCodec : (0, audio_codec_1.getDefaultAudioCodec)({ codec, preferLossless: false });
    const command = [
        (0, is_audio_codec_1.isAudioCodec)(codec) ? null : '-r',
        (0, is_audio_codec_1.isAudioCodec)(codec) ? null : String(fps),
        '-f',
        'concat',
        '-safe',
        '0',
        '-i',
        fileListTxt,
        numberOfGifLoops === null ? null : '-loop',
        numberOfGifLoops === null
            ? null
            : typeof numberOfGifLoops === 'number'
                ? String(numberOfGifLoops)
                : '-1',
        (0, is_audio_codec_1.isAudioCodec)(codec) ? null : '-c:v',
        (0, is_audio_codec_1.isAudioCodec)(codec) ? null : codec === 'gif' ? 'gif' : 'copy',
        resolvedAudioCodec ? '-c:a' : null,
        resolvedAudioCodec
            ? (0, audio_codec_1.mapAudioCodecToFfmpegAudioCodecName)(resolvedAudioCodec)
            : null,
        resolvedAudioCodec === 'aac' ? '-cutoff' : null,
        resolvedAudioCodec === 'aac' ? '18000' : null,
        '-b:a',
        audioBitrate ? audioBitrate : '320k',
        codec === 'h264' ? '-movflags' : null,
        codec === 'h264' ? 'faststart' : null,
        '-y',
        output,
    ].filter(truthy_1.truthy);
    logger_1.Log.verbose('Combining command: ', command);
    try {
        const task = (0, call_ffmpeg_1.callFf)('ffmpeg', command);
        (_a = task.stderr) === null || _a === void 0 ? void 0 : _a.on('data', (data) => {
            if (onProgress) {
                const parsed = (0, parse_ffmpeg_progress_1.parseFfmpegProgress)(data.toString('utf8'));
                if (parsed === undefined) {
                    logger_1.Log.verbose(data.toString('utf8'));
                }
                else {
                    logger_1.Log.verbose(`Combined ${parsed} frames`);
                    onProgress(parsed);
                }
            }
        });
        await task;
        onProgress(numberOfFrames);
        (0, node_fs_1.rmSync)(filelistDir, { recursive: true });
    }
    catch (err) {
        (0, node_fs_1.rmSync)(filelistDir, { recursive: true });
        throw err;
    }
};
exports.combineVideos = combineVideos;
