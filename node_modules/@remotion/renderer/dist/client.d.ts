/// <reference types="react" />
export declare const BrowserSafeApis: {
    getFileExtensionFromCodec: <T extends "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv" | "gif">(codec: T, audioCodec: "mp3" | "aac" | "pcm-16" | "opus" | null) => import("./file-extensions").FileExtension;
    validCodecs: readonly ["h264", "h265", "vp8", "vp9", "mp3", "aac", "wav", "prores", "h264-mkv", "gif"];
    validAudioCodecs: readonly ["pcm-16", "aac", "mp3", "opus"];
    getDefaultCrfForCodec: (codec: "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv" | "gif") => number;
    getValidCrfRanges: (codec: "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv" | "gif") => [number, number];
    isAudioCodec: (codec: "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv" | "gif" | null | undefined) => boolean;
    proResProfileOptions: readonly ["4444-xq", "4444", "hq", "standard", "light", "proxy"];
    x264PresetOptions: readonly ["ultrafast", "superfast", "veryfast", "faster", "fast", "medium", "slow", "slower", "veryslow", "placebo"];
    validPixelFormats: readonly ["yuv420p", "yuva420p", "yuv422p", "yuv444p", "yuv420p10le", "yuv422p10le", "yuv444p10le", "yuva444p10le"];
    DEFAULT_PIXEL_FORMAT: "yuv420p" | "yuva420p" | "yuv422p" | "yuv444p" | "yuv420p10le" | "yuv422p10le" | "yuv444p10le" | "yuva444p10le";
    supportedAudioCodecs: {
        readonly h264: readonly ["aac", "pcm-16", "mp3"];
        readonly 'h264-mkv': readonly ["pcm-16", "mp3"];
        readonly aac: readonly ["aac", "pcm-16"];
        readonly gif: readonly [];
        readonly h265: readonly ["aac", "pcm-16"];
        readonly mp3: readonly ["mp3", "pcm-16"];
        readonly prores: readonly ["aac", "pcm-16"];
        readonly vp8: readonly ["opus", "pcm-16"];
        readonly vp9: readonly ["opus", "pcm-16"];
        readonly wav: readonly ["pcm-16"];
    };
    defaultFileExtensionMap: {
        h264: {
            default: import("./file-extensions").FileExtension;
            forAudioCodec: {
                mp3: {
                    possible: import("./file-extensions").FileExtension[];
                    default: import("./file-extensions").FileExtension;
                };
                aac: {
                    possible: import("./file-extensions").FileExtension[];
                    default: import("./file-extensions").FileExtension;
                };
                "pcm-16": {
                    possible: import("./file-extensions").FileExtension[];
                    default: import("./file-extensions").FileExtension;
                };
            };
        };
        h265: {
            default: import("./file-extensions").FileExtension;
            forAudioCodec: {
                aac: {
                    possible: import("./file-extensions").FileExtension[];
                    default: import("./file-extensions").FileExtension;
                };
                "pcm-16": {
                    possible: import("./file-extensions").FileExtension[];
                    default: import("./file-extensions").FileExtension;
                };
            };
        };
        vp8: {
            default: import("./file-extensions").FileExtension;
            forAudioCodec: {
                "pcm-16": {
                    possible: import("./file-extensions").FileExtension[];
                    default: import("./file-extensions").FileExtension;
                };
                opus: {
                    possible: import("./file-extensions").FileExtension[];
                    default: import("./file-extensions").FileExtension;
                };
            };
        };
        vp9: {
            default: import("./file-extensions").FileExtension;
            forAudioCodec: {
                "pcm-16": {
                    possible: import("./file-extensions").FileExtension[];
                    default: import("./file-extensions").FileExtension;
                };
                opus: {
                    possible: import("./file-extensions").FileExtension[];
                    default: import("./file-extensions").FileExtension;
                };
            };
        };
        mp3: {
            default: import("./file-extensions").FileExtension;
            forAudioCodec: {
                mp3: {
                    possible: import("./file-extensions").FileExtension[];
                    default: import("./file-extensions").FileExtension;
                };
                "pcm-16": {
                    possible: import("./file-extensions").FileExtension[];
                    default: import("./file-extensions").FileExtension;
                };
            };
        };
        aac: {
            default: import("./file-extensions").FileExtension;
            forAudioCodec: {
                aac: {
                    possible: import("./file-extensions").FileExtension[];
                    default: import("./file-extensions").FileExtension;
                };
                "pcm-16": {
                    possible: import("./file-extensions").FileExtension[];
                    default: import("./file-extensions").FileExtension;
                };
            };
        };
        wav: {
            default: import("./file-extensions").FileExtension;
            forAudioCodec: {
                "pcm-16": {
                    possible: import("./file-extensions").FileExtension[];
                    default: import("./file-extensions").FileExtension;
                };
            };
        };
        prores: {
            default: import("./file-extensions").FileExtension;
            forAudioCodec: {
                aac: {
                    possible: import("./file-extensions").FileExtension[];
                    default: import("./file-extensions").FileExtension;
                };
                "pcm-16": {
                    possible: import("./file-extensions").FileExtension[];
                    default: import("./file-extensions").FileExtension;
                };
            };
        };
        "h264-mkv": {
            default: import("./file-extensions").FileExtension;
            forAudioCodec: {
                mp3: {
                    possible: import("./file-extensions").FileExtension[];
                    default: import("./file-extensions").FileExtension;
                };
                "pcm-16": {
                    possible: import("./file-extensions").FileExtension[];
                    default: import("./file-extensions").FileExtension;
                };
            };
        };
        gif: {
            default: import("./file-extensions").FileExtension;
            forAudioCodec: {};
        };
    };
    defaultAudioCodecs: {
        h264: {
            compressed: "mp3" | "aac" | "pcm-16" | null;
            lossless: "mp3" | "aac" | "pcm-16" | null;
        };
        h265: {
            compressed: "aac" | "pcm-16" | null;
            lossless: "aac" | "pcm-16" | null;
        };
        vp8: {
            compressed: "pcm-16" | "opus" | null;
            lossless: "pcm-16" | "opus" | null;
        };
        vp9: {
            compressed: "pcm-16" | "opus" | null;
            lossless: "pcm-16" | "opus" | null;
        };
        mp3: {
            compressed: "mp3" | "pcm-16" | null;
            lossless: "mp3" | "pcm-16" | null;
        };
        aac: {
            compressed: "aac" | "pcm-16" | null;
            lossless: "aac" | "pcm-16" | null;
        };
        wav: {
            compressed: "pcm-16" | null;
            lossless: "pcm-16" | null;
        };
        prores: {
            compressed: "aac" | "pcm-16" | null;
            lossless: "aac" | "pcm-16" | null;
        };
        "h264-mkv": {
            compressed: "mp3" | "pcm-16" | null;
            lossless: "mp3" | "pcm-16" | null;
        };
        gif: {
            compressed: null;
            lossless: null;
        };
    };
    defaultCodecsForFileExtension: Record<import("./file-extensions").FileExtension, "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv" | "gif">;
    validateOutputFilename: <T_1 extends "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv" | "gif">({ codec, audioCodec, extension, preferLossless, }: {
        codec: T_1;
        audioCodec: "mp3" | "aac" | "pcm-16" | "opus" | null;
        extension: string;
        preferLossless: boolean;
    }) => void;
    options: {
        scaleOption: {
            name: string;
            cliFlag: string;
            description: () => JSX.Element;
            ssrName: string;
            docLink: string;
            type: number;
        };
        crfOption: {
            name: string;
            cliFlag: string;
            description: () => JSX.Element;
            ssrName: string;
            docLink: string;
            type: number;
        };
        jpegQualityOption: {
            name: string;
            cliFlag: string;
            description: () => JSX.Element;
            ssrName: string;
            docLink: string;
            type: number;
        };
        videoBitrate: {
            name: string;
            cliFlag: string;
            description: () => JSX.Element;
            ssrName: string;
            docLink: string;
            type: string;
        };
        audioBitrateOption: {
            name: string;
            cliFlag: string;
            description: () => JSX.Element;
            ssrName: string;
            docLink: string;
            type: string;
        };
        enforceAudioOption: {
            name: string;
            cliFlag: string;
            description: () => JSX.Element;
            ssrName: string;
            docLink: string;
            type: boolean;
        };
        muteOption: {
            name: string;
            cliFlag: string;
            description: () => JSX.Element;
            ssrName: string;
            docLink: string;
            type: boolean;
        };
        videoCodecOption: {
            name: string;
            cliFlag: string;
            description: () => JSX.Element;
            ssrName: string;
            docLink: string;
            type: string;
        };
        offthreadVideoCacheSizeInBytesOption: {
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
        };
        webhookCustomDataOption: {
            name: string;
            cliFlag: "webhook-custom-data";
            description: (type: "ssr" | "cli") => JSX.Element;
            ssrName: "customData";
            docLink: string;
            type: Record<string, unknown> | null;
        };
        colorSpaceOption: {
            name: string;
            cliFlag: "color-space";
            description: () => JSX.Element;
            docLink: string;
            ssrName: string;
            type: "default" | "bt709";
        };
        deleteAfterOption: {
            name: string;
            cliFlag: "delete-after";
            description: () => JSX.Element;
            ssrName: "deleteAfter";
            docLink: string;
            type: string | null;
        };
        folderExpiryOption: {
            name: string;
            cliFlag: "enable-folder-expiry";
            description: () => JSX.Element;
            ssrName: "enableFolderExpiry";
            docLink: string;
            type: boolean | null;
        };
        enableMultiprocessOnLinuxOption: {
            name: string;
            cliFlag: "enable-multiprocess-on-linux";
            description: () => JSX.Element;
            ssrName: string;
            docLink: string;
            type: boolean;
        };
        glOption: {
            cliFlag: string;
            docLink: string;
            name: string;
            type: "swangle" | "angle" | "egl" | "swiftshader" | "vulkan" | "angle-egl";
            ssrName: string;
            description: () => JSX.Element;
        };
    };
    validColorSpaces: readonly ["default", "bt709"];
    optionsMap: {
        readonly renderMedia: readonly [{
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
        }];
        readonly renderStill: readonly [{
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
        }];
        readonly getCompositions: readonly [{
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
        }];
        readonly selectComposition: readonly [{
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
        }];
        readonly renderFrames: readonly [{
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
        }];
        readonly renderMediaOnLambda: readonly [{
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
        }];
        readonly renderStillOnLambda: readonly [{
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
        }];
        readonly getCompositionsOnLambda: readonly [{
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
        }];
        readonly renderMediaOnCloudRun: readonly [{
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
        }];
        readonly renderStillOnCloudRun: readonly [{
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
        }];
    };
    codecSupportsCrf: (codec: "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv" | "gif") => boolean;
    codecSupportsVideoBitrate: (codec: "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv" | "gif") => boolean;
};
