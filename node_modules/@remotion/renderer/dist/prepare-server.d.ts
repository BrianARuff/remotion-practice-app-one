import type { RenderMediaOnDownload } from './assets/download-and-map-assets-to-file';
import type { DownloadMap } from './assets/download-map';
import type { Compositor } from './compositor/compositor';
import type { LogLevel } from './log-level';
import type { AnySourceMapConsumer } from './symbolicate-stacktrace';
export type RemotionServer = {
    serveUrl: string;
    closeServer: (force: boolean) => Promise<unknown>;
    offthreadPort: number;
    compositor: Compositor;
    sourceMap: Promise<AnySourceMapConsumer | null>;
    downloadMap: DownloadMap;
};
type PrepareServerOptions = {
    webpackConfigOrServeUrl: string;
    port: number | null;
    remotionRoot: string;
    concurrency: number;
    logLevel: LogLevel;
    indent: boolean;
    offthreadVideoCacheSizeInBytes: number | null;
};
export declare const prepareServer: ({ webpackConfigOrServeUrl, port, remotionRoot, concurrency, logLevel, indent, offthreadVideoCacheSizeInBytes, }: PrepareServerOptions) => Promise<RemotionServer>;
export declare const makeOrReuseServer: (server: RemotionServer | undefined, config: PrepareServerOptions, { onDownload, onError, }: {
    onError: (err: Error) => void;
    onDownload: RenderMediaOnDownload | null;
}) => Promise<{
    server: RemotionServer;
    cleanupServer: (force: boolean) => Promise<unknown>;
}>;
export {};
