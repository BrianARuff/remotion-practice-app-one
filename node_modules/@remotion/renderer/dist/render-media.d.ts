/// <reference types="node" />
import type { VideoConfig } from 'remotion';
import { type RenderMediaOnDownload } from './assets/download-and-map-assets-to-file';
import type { AudioCodec } from './audio-codec';
import type { BrowserExecutable } from './browser-executable';
import type { BrowserLog } from './browser-log';
import type { HeadlessBrowser } from './browser/Browser';
import type { Codec } from './codec';
import type { FfmpegOverrideFn } from './ffmpeg-override';
import type { FrameRange } from './frame-range';
import type { VideoImageFormat } from './image-format';
import { type LogLevel } from './log-level';
import type { CancelSignal } from './make-cancel-signal';
import type { ChromiumOptions } from './open-browser';
import type { ColorSpace } from './options/color-space';
import type { ToOptions } from './options/option';
import type { optionsMap } from './options/options-map';
import type { PixelFormat } from './pixel-format';
import type { RemotionServer } from './prepare-server';
import type { ProResProfile } from './prores-profile';
import type { OnStartData } from './types';
import type { X264Preset } from './x264-preset';
export type StitchingState = 'encoding' | 'muxing';
export type SlowFrame = {
    frame: number;
    time: number;
};
export type RenderMediaOnProgress = (progress: {
    renderedFrames: number;
    encodedFrames: number;
    encodedDoneIn: number | null;
    renderedDoneIn: number | null;
    progress: number;
    stitchStage: StitchingState;
}) => void;
export type InternalRenderMediaOptions = {
    outputLocation: string | null;
    codec: Codec;
    composition: Omit<VideoConfig, 'props' | 'defaultProps'>;
    serializedInputPropsWithCustomSchema: string;
    serializedResolvedPropsWithCustomSchema: string;
    crf: number | null;
    imageFormat: VideoImageFormat;
    pixelFormat: PixelFormat;
    envVariables: Record<string, string>;
    jpegQuality: number;
    frameRange: FrameRange | null;
    everyNthFrame: number;
    numberOfGifLoops: number | null;
    puppeteerInstance: HeadlessBrowser | undefined;
    overwrite: boolean;
    onProgress: RenderMediaOnProgress;
    onDownload: RenderMediaOnDownload;
    proResProfile: ProResProfile | undefined;
    x264Preset: X264Preset | undefined;
    onBrowserLog: ((log: BrowserLog) => void) | null;
    onStart: (data: OnStartData) => void;
    timeoutInMilliseconds: number;
    chromiumOptions: ChromiumOptions;
    scale: number;
    port: number | null;
    cancelSignal: CancelSignal | undefined;
    browserExecutable: BrowserExecutable | null;
    logLevel: LogLevel;
    onCtrlCExit: (fn: () => void) => void;
    indent: boolean;
    server: RemotionServer | undefined;
    preferLossless: boolean;
    muted: boolean;
    enforceAudioTrack: boolean;
    ffmpegOverride: FfmpegOverrideFn | undefined;
    audioBitrate: string | null;
    videoBitrate: string | null;
    disallowParallelEncoding: boolean;
    audioCodec: AudioCodec | null;
    serveUrl: string;
    concurrency: number | string | null;
    colorSpace: ColorSpace;
} & ToOptions<typeof optionsMap.renderMedia>;
export type RenderMediaOptions = {
    outputLocation?: string | null;
    codec: Codec;
    composition: VideoConfig;
    inputProps?: Record<string, unknown>;
    crf?: number | null;
    imageFormat?: VideoImageFormat;
    pixelFormat?: PixelFormat;
    envVariables?: Record<string, string>;
    /**
     * @deprecated Renamed to `jpegQuality`
     */
    quality?: never;
    jpegQuality?: number;
    frameRange?: FrameRange | null;
    everyNthFrame?: number;
    numberOfGifLoops?: number | null;
    puppeteerInstance?: HeadlessBrowser;
    overwrite?: boolean;
    onProgress?: RenderMediaOnProgress;
    onDownload?: RenderMediaOnDownload;
    proResProfile?: ProResProfile;
    x264Preset?: X264Preset;
    /**
     * @deprecated Use "logLevel": "verbose" instead
     */
    dumpBrowserLogs?: boolean;
    onBrowserLog?: ((log: BrowserLog) => void) | undefined;
    onStart?: (data: OnStartData) => void;
    timeoutInMilliseconds?: number;
    chromiumOptions?: ChromiumOptions;
    scale?: number;
    port?: number | null;
    cancelSignal?: CancelSignal;
    browserExecutable?: BrowserExecutable;
    /**
     * @deprecated Use "logLevel" instead
     */
    verbose?: boolean;
    preferLossless?: boolean;
    muted?: boolean;
    enforceAudioTrack?: boolean;
    ffmpegOverride?: FfmpegOverrideFn;
    audioBitrate?: string | null;
    videoBitrate?: string | null;
    disallowParallelEncoding?: boolean;
    audioCodec?: AudioCodec | null;
    serveUrl: string;
    concurrency?: number | string | null;
    logLevel?: LogLevel;
    offthreadVideoCacheSizeInBytes?: number | null;
    colorSpace?: ColorSpace;
};
type RenderMediaResult = {
    buffer: Buffer | null;
    slowestFrames: SlowFrame[];
};
export declare const internalRenderMedia: (args_0: InternalRenderMediaOptions) => Promise<RenderMediaResult>;
/**
 *
 * @description Render a video from a composition
 * @see [Documentation](https://www.remotion.dev/docs/renderer/render-media)
 */
export declare const renderMedia: ({ proResProfile, x264Preset, crf, composition, inputProps, pixelFormat, codec, envVariables, frameRange, puppeteerInstance, outputLocation, onProgress, overwrite, onDownload, onBrowserLog, onStart, timeoutInMilliseconds, chromiumOptions, scale, browserExecutable, port, cancelSignal, muted, enforceAudioTrack, ffmpegOverride, audioBitrate, videoBitrate, audioCodec, jpegQuality, concurrency, serveUrl, disallowParallelEncoding, everyNthFrame, imageFormat, numberOfGifLoops, dumpBrowserLogs, preferLossless, verbose, quality, logLevel, offthreadVideoCacheSizeInBytes, colorSpace, }: RenderMediaOptions) => Promise<RenderMediaResult>;
export {};
