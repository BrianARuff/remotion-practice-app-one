import type { Browser } from './browser';
import type { HeadlessBrowser } from './browser/Browser';
import type { Viewport } from './browser/PuppeteerViewport';
import { type LogLevel } from './log-level';
import type { validOpenGlRenderers } from './options/gl';
type OpenGlRenderer = (typeof validOpenGlRenderers)[number];
export type ChromiumOptions = {
    ignoreCertificateErrors?: boolean;
    disableWebSecurity?: boolean;
    gl?: OpenGlRenderer | null;
    headless?: boolean;
    userAgent?: string | null;
    enableMultiProcessOnLinux?: boolean;
};
export declare const killAllBrowsers: () => Promise<void>;
type InternalOpenBrowserOptions = {
    browserExecutable: string | null;
    chromiumOptions: ChromiumOptions;
    forceDeviceScaleFactor: number | undefined;
    viewport: Viewport | null;
    indent: boolean;
    browser: Browser;
    logLevel: LogLevel;
};
export type OpenBrowserOptions = {
    shouldDumpIo?: boolean;
    browserExecutable?: string | null;
    chromiumOptions?: ChromiumOptions;
    forceDeviceScaleFactor?: number;
};
export declare const internalOpenBrowser: ({ browser, browserExecutable, chromiumOptions, forceDeviceScaleFactor, indent, viewport, logLevel, }: InternalOpenBrowserOptions) => Promise<HeadlessBrowser>;
/**
 * @description Opens a Chrome or Chromium browser instance.
 * @see [Documentation](https://www.remotion.dev/docs/renderer/open-browser)
 */
export declare const openBrowser: (browser: Browser, options?: OpenBrowserOptions) => Promise<HeadlessBrowser>;
export {};
