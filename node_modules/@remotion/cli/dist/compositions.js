"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.listCompositionsCommand = void 0;
const renderer_1 = require("@remotion/renderer");
const remotion_1 = require("remotion");
const cleanup_before_quit_1 = require("./cleanup-before-quit");
const config_1 = require("./config");
const entry_point_1 = require("./entry-point");
const get_cli_options_1 = require("./get-cli-options");
const log_1 = require("./log");
const print_compositions_1 = require("./print-compositions");
const setup_cache_1 = require("./setup-cache");
const listCompositionsCommand = async (remotionRoot, args) => {
    const { file, reason } = (0, entry_point_1.findEntryPoint)(args, remotionRoot);
    if (!file) {
        log_1.Log.error('The `compositions` command requires you to specify a entry point. For example');
        log_1.Log.error('  npx remotion compositions src/index.ts');
        log_1.Log.error('See https://www.remotion.dev/docs/register-root for more information.');
        process.exit(1);
    }
    const logLevel = config_1.ConfigInternals.Logging.getLogLevel();
    log_1.Log.verbose('Entry point:', file, 'reason:', reason);
    const { browserExecutable, chromiumOptions, envVariables, inputProps, puppeteerTimeout, port, publicDir, offthreadVideoCacheSizeInBytes, } = await (0, get_cli_options_1.getCliOptions)({
        isLambda: false,
        type: 'get-compositions',
        remotionRoot,
    });
    const { urlOrBundle: bundled, cleanup: cleanupBundle } = await (0, setup_cache_1.bundleOnCliOrTakeServeUrl)({
        remotionRoot,
        fullPath: file,
        publicDir,
        onProgress: () => undefined,
        indentOutput: false,
        logLevel,
        bundlingStep: 0,
        steps: 1,
        onDirectoryCreated: (dir) => {
            (0, cleanup_before_quit_1.registerCleanupJob)(() => renderer_1.RenderInternals.deleteDirectory(dir));
        },
        quietProgress: false,
    });
    (0, cleanup_before_quit_1.registerCleanupJob)(() => cleanupBundle());
    const compositions = await renderer_1.RenderInternals.internalGetCompositions({
        serveUrlOrWebpackUrl: bundled,
        browserExecutable,
        chromiumOptions,
        envVariables,
        serializedInputPropsWithCustomSchema: remotion_1.Internals.serializeJSONWithDate({
            data: inputProps,
            staticBase: null,
            indent: undefined,
        }).serializedString,
        timeoutInMilliseconds: puppeteerTimeout,
        port,
        indent: false,
        onBrowserLog: null,
        puppeteerInstance: undefined,
        logLevel,
        server: undefined,
        offthreadVideoCacheSizeInBytes,
    });
    (0, print_compositions_1.printCompositions)(compositions);
};
exports.listCompositionsCommand = listCompositionsCommand;
