import type { Codec, X264Preset } from '@remotion/renderer';
import React from 'react';
import type { UiOpenGlOptions } from '../../../required-chromium-options';
export type RenderType = 'still' | 'video' | 'audio' | 'sequence';
export declare const RenderModalAdvanced: React.FC<{
    renderMode: RenderType;
    minConcurrency: number;
    maxConcurrency: number;
    setConcurrency: React.Dispatch<React.SetStateAction<number>>;
    concurrency: number;
    setVerboseLogging: React.Dispatch<React.SetStateAction<boolean>>;
    verbose: boolean;
    delayRenderTimeout: number;
    setDelayRenderTimeout: React.Dispatch<React.SetStateAction<number>>;
    disallowParallelEncoding: boolean;
    setDisallowParallelEncoding: React.Dispatch<React.SetStateAction<boolean>>;
    setDisableWebSecurity: React.Dispatch<React.SetStateAction<boolean>>;
    setIgnoreCertificateErrors: React.Dispatch<React.SetStateAction<boolean>>;
    setHeadless: React.Dispatch<React.SetStateAction<boolean>>;
    headless: boolean;
    ignoreCertificateErrors: boolean;
    disableWebSecurity: boolean;
    openGlOption: UiOpenGlOptions;
    setOpenGlOption: React.Dispatch<React.SetStateAction<UiOpenGlOptions>>;
    envVariables: [string, string][];
    setEnvVariables: React.Dispatch<React.SetStateAction<[string, string][]>>;
    x264Preset: X264Preset | null;
    setx264Preset: React.Dispatch<React.SetStateAction<X264Preset>>;
    offthreadVideoCacheSizeInBytes: number | null;
    setOffthreadVideoCacheSizeInBytes: React.Dispatch<React.SetStateAction<number | null>>;
    codec: Codec;
    enableMultiProcessOnLinux: boolean;
    setChromiumMultiProcessOnLinux: React.Dispatch<React.SetStateAction<boolean>>;
}>;
