"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderModalAdvanced = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const client_1 = require("@remotion/renderer/client");
const react_1 = require("react");
const presets_labels_1 = require("../../helpers/presets-labels");
const Checkmark_1 = require("../../icons/Checkmark");
const Checkbox_1 = require("../Checkbox");
const is_menu_item_1 = require("../Menu/is-menu-item");
const ComboBox_1 = require("../NewComposition/ComboBox");
const layout_1 = require("./layout");
const NumberSetting_1 = require("./NumberSetting");
const RenderModalEnvironmentVariables_1 = require("./RenderModalEnvironmentVariables");
const RenderModalHr_1 = require("./RenderModalHr");
const container = {
    flex: 1,
    overflowY: 'auto',
};
const RenderModalAdvanced = ({ renderMode, maxConcurrency, minConcurrency, setConcurrency, concurrency, setVerboseLogging, verbose, delayRenderTimeout, setDelayRenderTimeout, disallowParallelEncoding, setDisallowParallelEncoding, setDisableWebSecurity, setIgnoreCertificateErrors, setHeadless, headless, ignoreCertificateErrors, disableWebSecurity, openGlOption, setOpenGlOption, setEnvVariables, envVariables, setx264Preset, x264Preset, codec, offthreadVideoCacheSizeInBytes, setOffthreadVideoCacheSizeInBytes, enableMultiProcessOnLinux, setChromiumMultiProcessOnLinux, }) => {
    const extendedOpenGlOptions = (0, react_1.useMemo)(() => {
        return [
            'angle',
            'egl',
            'swangle',
            'swiftshader',
            'vulkan',
            'angle-egl',
            'default',
        ];
    }, []);
    const onVerboseLoggingChanged = (0, react_1.useCallback)((e) => {
        setVerboseLogging(e.target.checked);
    }, [setVerboseLogging]);
    const toggleCustomOffthreadVideoCacheSizeInBytes = (0, react_1.useCallback)(() => {
        setOffthreadVideoCacheSizeInBytes((previous) => {
            if (previous === null) {
                return 512 * 1024 * 1024;
            }
            return null;
        });
    }, [setOffthreadVideoCacheSizeInBytes]);
    const onDisallowParallelEncodingChanged = (0, react_1.useCallback)((e) => {
        setDisallowParallelEncoding(e.target.checked);
    }, [setDisallowParallelEncoding]);
    const onDisableWebSecurityChanged = (0, react_1.useCallback)((e) => {
        setDisableWebSecurity(e.target.checked);
    }, [setDisableWebSecurity]);
    const onEnableMultiProcessOnLinux = (0, react_1.useCallback)((e) => {
        setChromiumMultiProcessOnLinux(e.target.checked);
    }, [setChromiumMultiProcessOnLinux]);
    const onIgnoreCertificatErrors = (0, react_1.useCallback)((e) => {
        setIgnoreCertificateErrors(e.target.checked);
    }, [setIgnoreCertificateErrors]);
    const onHeadless = (0, react_1.useCallback)((e) => {
        setHeadless(e.target.checked);
    }, [setHeadless]);
    const openGlOptions = (0, react_1.useMemo)(() => {
        return extendedOpenGlOptions.map((option) => {
            return {
                label: option === 'default' ? 'Default' : option,
                onClick: () => setOpenGlOption(option),
                key: option,
                leftItem: openGlOption === option ? (0, jsx_runtime_1.jsx)(Checkmark_1.Checkmark, {}) : null,
                id: option,
                keyHint: null,
                quickSwitcherLabel: null,
                subMenu: null,
                type: 'item',
                value: option,
            };
        });
    }, [extendedOpenGlOptions, openGlOption, setOpenGlOption]);
    const x264PresetOptions = (0, react_1.useMemo)(() => {
        return client_1.BrowserSafeApis.x264PresetOptions.map((option) => {
            return {
                label: (0, presets_labels_1.labelx264Preset)(option),
                onClick: () => setx264Preset(option),
                key: option,
                selected: x264Preset === option,
                type: 'item',
                id: option,
                keyHint: null,
                leftItem: null,
                quickSwitcherLabel: null,
                subMenu: null,
                value: option,
            };
        });
    }, [setx264Preset, x264Preset]);
    const changeOffthreadVideoCacheSizeInBytes = (0, react_1.useCallback)((cb) => {
        setOffthreadVideoCacheSizeInBytes((prev) => {
            if (prev === null) {
                throw new TypeError('Expected previous value');
            }
            if (typeof cb === 'function') {
                return cb(prev);
            }
            return cb;
        });
    }, [setOffthreadVideoCacheSizeInBytes]);
    return ((0, jsx_runtime_1.jsxs)("div", { style: container, className: is_menu_item_1.VERTICAL_SCROLLBAR_CLASSNAME, children: [renderMode === 'video' && codec === 'h264' ? ((0, jsx_runtime_1.jsxs)("div", { style: layout_1.optionRow, children: [(0, jsx_runtime_1.jsx)("div", { style: layout_1.label, children: "x264 Preset" }), (0, jsx_runtime_1.jsx)("div", { style: layout_1.rightRow, children: (0, jsx_runtime_1.jsx)(ComboBox_1.Combobox, { title: x264Preset, selectedId: x264Preset, values: x264PresetOptions }) })] })) : null, renderMode === 'still' ? null : ((0, jsx_runtime_1.jsx)(NumberSetting_1.NumberSetting, { min: minConcurrency, max: maxConcurrency, step: 1, name: "Concurrency", formatter: (w) => `${w}x`, onValueChanged: setConcurrency, value: concurrency })), (0, jsx_runtime_1.jsx)(NumberSetting_1.NumberSetting
            // Also appears in packages/renderer/src/validate-puppeteer-timeout.ts
            , { 
                // Also appears in packages/renderer/src/validate-puppeteer-timeout.ts
                min: 7000, max: 900000, name: "delayRender() timeout", onValueChanged: setDelayRenderTimeout, formatter: (w) => `${w}ms`, step: 1000, value: delayRenderTimeout }), (0, jsx_runtime_1.jsxs)("div", { style: layout_1.optionRow, children: [(0, jsx_runtime_1.jsx)("div", { style: layout_1.label, children: "No parallel encoding" }), (0, jsx_runtime_1.jsx)("div", { style: layout_1.rightRow, children: (0, jsx_runtime_1.jsx)(Checkbox_1.Checkbox, { checked: disallowParallelEncoding, onChange: onDisallowParallelEncodingChanged, name: "disallow-parallel-encoding" }) })] }), renderMode === 'audio' ? null : ((0, jsx_runtime_1.jsxs)("div", { style: layout_1.optionRow, children: [(0, jsx_runtime_1.jsx)("div", { style: layout_1.label, children: "Custom OffthreadVideo cache" }), (0, jsx_runtime_1.jsx)("div", { style: layout_1.rightRow, children: (0, jsx_runtime_1.jsx)(Checkbox_1.Checkbox, { checked: offthreadVideoCacheSizeInBytes !== null, onChange: toggleCustomOffthreadVideoCacheSizeInBytes, name: "custom-audio-bitrate" }) })] })), renderMode === 'audio' ||
                offthreadVideoCacheSizeInBytes === null ? null : ((0, jsx_runtime_1.jsx)(NumberSetting_1.NumberSetting, { min: minConcurrency, max: 2000 * 1024 * 1024, step: 1024, name: "OffthreadVideo cache size", formatter: (w) => `${w} bytes`, onValueChanged: changeOffthreadVideoCacheSizeInBytes, value: offthreadVideoCacheSizeInBytes })), (0, jsx_runtime_1.jsxs)("div", { style: layout_1.optionRow, children: [(0, jsx_runtime_1.jsx)("div", { style: layout_1.label, children: "Verbose logging" }), (0, jsx_runtime_1.jsx)("div", { style: layout_1.rightRow, children: (0, jsx_runtime_1.jsx)(Checkbox_1.Checkbox, { checked: verbose, onChange: onVerboseLoggingChanged, name: "verbose-logging" }) })] }), (0, jsx_runtime_1.jsx)(RenderModalHr_1.RenderModalHr, {}), (0, jsx_runtime_1.jsxs)("div", { style: layout_1.optionRow, children: [(0, jsx_runtime_1.jsx)("div", { style: layout_1.label, children: "Disable web security" }), (0, jsx_runtime_1.jsx)("div", { style: layout_1.rightRow, children: (0, jsx_runtime_1.jsx)(Checkbox_1.Checkbox, { checked: disableWebSecurity, onChange: onDisableWebSecurityChanged, name: "disable-web-security" }) })] }), (0, jsx_runtime_1.jsxs)("div", { style: layout_1.optionRow, children: [(0, jsx_runtime_1.jsx)("div", { style: layout_1.label, children: "Ignore certificate errors " }), (0, jsx_runtime_1.jsx)("div", { style: layout_1.rightRow, children: (0, jsx_runtime_1.jsx)(Checkbox_1.Checkbox, { checked: ignoreCertificateErrors, onChange: onIgnoreCertificatErrors, name: "ignore-certificate-errors" }) })] }), (0, jsx_runtime_1.jsxs)("div", { style: layout_1.optionRow, children: [(0, jsx_runtime_1.jsx)("div", { style: layout_1.label, children: "Headless mode" }), (0, jsx_runtime_1.jsx)("div", { style: layout_1.rightRow, children: (0, jsx_runtime_1.jsx)(Checkbox_1.Checkbox, { checked: headless, onChange: onHeadless, name: "headless" }) })] }), (0, jsx_runtime_1.jsxs)("div", { style: layout_1.optionRow, children: [(0, jsx_runtime_1.jsx)("div", { style: layout_1.label, children: "OpenGL render backend" }), (0, jsx_runtime_1.jsx)("div", { style: layout_1.rightRow, children: (0, jsx_runtime_1.jsx)(ComboBox_1.Combobox, { values: openGlOptions, selectedId: openGlOption, title: "OpenGl option" }) })] }), (0, jsx_runtime_1.jsxs)("div", { style: layout_1.optionRow, children: [(0, jsx_runtime_1.jsx)("div", { style: layout_1.label, children: "Multi-process Chrome on Linux" }), (0, jsx_runtime_1.jsx)("div", { style: layout_1.rightRow, children: (0, jsx_runtime_1.jsx)(Checkbox_1.Checkbox, { checked: enableMultiProcessOnLinux, onChange: onEnableMultiProcessOnLinux, name: "enable-multi-process-on-linux" }) })] }), (0, jsx_runtime_1.jsx)(RenderModalHr_1.RenderModalHr, {}), (0, jsx_runtime_1.jsx)(RenderModalEnvironmentVariables_1.RenderModalEnvironmentVariables, { envVariables: envVariables, setEnvVariables: setEnvVariables })] }));
};
exports.RenderModalAdvanced = RenderModalAdvanced;
