"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaLabel = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const colors_1 = require("../../../helpers/colors");
const layout_1 = require("../../layout");
const InlineRemoveButton_1 = require("../InlineRemoveButton");
const get_schema_label_1 = require("./get-schema-label");
const SchemaResetButton_1 = require("./SchemaResetButton");
const SchemaSaveButton_1 = require("./SchemaSaveButton");
const compactStyles = {
    fontSize: 15,
    color: colors_1.LIGHT_TEXT,
    fontFamily: 'sans-serif',
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
};
const SchemaLabel = ({ jsonPath, isDefaultValue, onReset, onSave, showSaveButton, onRemove, saving, valid, saveDisabledByParent, suffix, }) => {
    const disableSave = saving || !valid || saveDisabledByParent;
    const labelStyle = (0, react_1.useMemo)(() => {
        return {
            fontFamily: 'monospace',
            fontSize: 14,
            color: valid ? colors_1.LIGHT_TEXT : colors_1.FAIL_COLOR,
            lineHeight: '24px',
        };
    }, [valid]);
    return ((0, jsx_runtime_1.jsxs)("div", { style: compactStyles, children: [(0, jsx_runtime_1.jsxs)("span", { style: labelStyle, children: [(0, get_schema_label_1.getSchemaLabel)(jsonPath), " ", suffix ? suffix : null] }), (0, jsx_runtime_1.jsx)(layout_1.Flex, {}), isDefaultValue ? null : (0, jsx_runtime_1.jsx)(SchemaResetButton_1.SchemaResetButton, { onClick: onReset }), isDefaultValue ? null : showSaveButton ? ((0, jsx_runtime_1.jsx)(SchemaSaveButton_1.SchemaSaveButton, { onClick: onSave, disabled: disableSave })) : null, onRemove ? (0, jsx_runtime_1.jsx)(InlineRemoveButton_1.InlineRemoveButton, { onClick: onRemove }) : null] }));
};
exports.SchemaLabel = SchemaLabel;
