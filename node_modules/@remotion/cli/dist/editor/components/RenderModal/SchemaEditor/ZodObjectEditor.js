"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZodObjectEditor = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const get_zod_if_possible_1 = require("../../get-zod-if-possible");
const layout_1 = require("../layout");
const deep_equal_1 = require("./deep-equal");
const Fieldset_1 = require("./Fieldset");
const local_state_1 = require("./local-state");
const SchemaLabel_1 = require("./SchemaLabel");
const SchemaSeparationLine_1 = require("./SchemaSeparationLine");
const SchemaVerticalGuide_1 = require("./SchemaVerticalGuide");
const ZodSwitch_1 = require("./ZodSwitch");
const ZodObjectEditor = ({ schema, jsonPath, setValue, value, defaultValue, onSave, showSaveButton, onRemove, saving, saveDisabledByParent, mayPad, discriminatedUnionReplacement, }) => {
    const z = (0, get_zod_if_possible_1.useZodIfPossible)();
    if (!z) {
        throw new Error('expected zod');
    }
    const { localValue, onChange, RevisionContextProvider, reset } = (0, local_state_1.useLocalState)({
        schema,
        setValue,
        value,
        defaultValue,
    });
    const def = schema._def;
    const typeName = def.typeName;
    if (typeName !== z.ZodFirstPartyTypeKind.ZodObject) {
        throw new Error('expected object');
    }
    const shape = def.shape();
    const keys = Object.keys(shape);
    const isRoot = jsonPath.length === 0;
    const isDefaultValue = (0, react_1.useMemo)(() => {
        return (0, deep_equal_1.deepEqual)(localValue.value, defaultValue);
    }, [defaultValue, localValue]);
    return ((0, jsx_runtime_1.jsxs)(Fieldset_1.Fieldset, { shouldPad: !isRoot && mayPad, success: localValue.zodValidation.success, children: [isRoot ? null : ((0, jsx_runtime_1.jsx)(SchemaLabel_1.SchemaLabel, { isDefaultValue: isDefaultValue, onReset: reset, jsonPath: jsonPath, onRemove: onRemove, suffix: ' {', onSave: () => {
                    onSave(() => {
                        return localValue.value;
                    }, false, false);
                }, saveDisabledByParent: saveDisabledByParent, saving: saving, showSaveButton: showSaveButton, valid: localValue.zodValidation.success })), (0, jsx_runtime_1.jsx)(RevisionContextProvider, { children: (0, jsx_runtime_1.jsx)(SchemaVerticalGuide_1.SchemaVerticalGuide, { isRoot: isRoot, children: keys.map((key, i) => {
                        if (discriminatedUnionReplacement &&
                            key === discriminatedUnionReplacement.discriminator) {
                            return discriminatedUnionReplacement.markup;
                        }
                        return ((0, jsx_runtime_1.jsxs)(react_1.default.Fragment, { children: [(0, jsx_runtime_1.jsx)(ZodSwitch_1.ZodSwitch, { mayPad: true, jsonPath: [...jsonPath, key], schema: shape[key], value: localValue.value[key], 
                                    // In case of null | {a: string, b: string} type, we need to fallback to the default value
                                    defaultValue: (defaultValue !== null && defaultValue !== void 0 ? defaultValue : value)[key], setValue: (val, forceApply) => {
                                        onChange((oldVal) => {
                                            return {
                                                ...oldVal,
                                                [key]: typeof val === 'function' ? val(oldVal[key]) : val,
                                            };
                                        }, forceApply, false);
                                    }, onSave: (val, forceApply) => {
                                        onSave((oldVal) => {
                                            return {
                                                ...oldVal,
                                                [key]: typeof val === 'function' ? val(oldVal[key]) : val,
                                            };
                                        }, forceApply, false);
                                    }, onRemove: null, showSaveButton: showSaveButton, saving: saving, saveDisabledByParent: saveDisabledByParent }), i === keys.length - 1 ? null : (0, jsx_runtime_1.jsx)(SchemaSeparationLine_1.SchemaSeparationLine, {})] }, key));
                    }) }) }), isRoot ? null : (0, jsx_runtime_1.jsx)("div", { style: layout_1.fieldsetLabel, children: '}' })] }));
};
exports.ZodObjectEditor = ZodObjectEditor;
