"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaEditor = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const document_title_1 = require("../../../helpers/document-title");
const use_keybinding_1 = require("../../../helpers/use-keybinding");
const get_zod_if_possible_1 = require("../../get-zod-if-possible");
const is_menu_item_1 = require("../../Menu/is-menu-item");
const deep_equal_1 = require("./deep-equal");
const SchemaErrorMessages_1 = require("./SchemaErrorMessages");
const ZodObjectEditor_1 = require("./ZodObjectEditor");
const scrollable = {
    display: 'flex',
    flexDirection: 'column',
    overflowY: 'auto',
};
const SchemaEditor = ({ schema, value, setValue, zodValidationResult, defaultProps, onSave, showSaveButton, saving, saveDisabledByParent, }) => {
    const keybindings = (0, use_keybinding_1.useKeybinding)();
    const z = (0, get_zod_if_possible_1.useZodIfPossible)();
    if (!z) {
        throw new Error('expected zod');
    }
    const hasChanged = (0, react_1.useMemo)(() => {
        return !(0, deep_equal_1.deepEqual)(defaultProps, value);
    }, [defaultProps, value]);
    (0, react_1.useEffect)(() => {
        (0, document_title_1.setUnsavedProps)(hasChanged);
    }, [hasChanged]);
    const onQuickSave = (0, react_1.useCallback)(() => {
        if (hasChanged && showSaveButton) {
            onSave(() => {
                return value;
            });
        }
    }, [hasChanged, onSave, showSaveButton, value]);
    (0, react_1.useEffect)(() => {
        const save = keybindings.registerKeybinding({
            event: 'keydown',
            key: 's',
            commandCtrlKey: true,
            callback: onQuickSave,
            preventDefault: true,
            triggerIfInputFieldFocused: true,
        });
        return () => {
            save.unregister();
        };
    }, [keybindings, onQuickSave, onSave]);
    const def = schema._def;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const typeName = def.typeName;
    const reset = (0, react_1.useCallback)(() => {
        setValue(defaultProps);
    }, [defaultProps, setValue]);
    if (!zodValidationResult.success) {
        const defaultPropsValid = schema.safeParse(defaultProps);
        if (!defaultPropsValid.success) {
            return (0, jsx_runtime_1.jsx)(SchemaErrorMessages_1.InvalidDefaultProps, { zodValidationResult: zodValidationResult });
        }
        return ((0, jsx_runtime_1.jsx)(SchemaErrorMessages_1.InvalidSchema, { reset: reset, zodValidationResult: zodValidationResult }));
    }
    if (typeName !== z.ZodFirstPartyTypeKind.ZodObject) {
        return (0, jsx_runtime_1.jsx)(SchemaErrorMessages_1.TopLevelZodValue, { typeReceived: typeName });
    }
    return ((0, jsx_runtime_1.jsx)("div", { style: scrollable, className: is_menu_item_1.VERTICAL_SCROLLBAR_CLASSNAME, children: (0, jsx_runtime_1.jsx)(ZodObjectEditor_1.ZodObjectEditor, { discriminatedUnionReplacement: null, value: value, setValue: setValue, jsonPath: [], schema: schema, defaultValue: defaultProps, onSave: onSave, showSaveButton: showSaveButton, onRemove: null, saving: saving, saveDisabledByParent: saveDisabledByParent, mayPad: true }) }));
};
exports.SchemaEditor = SchemaEditor;
