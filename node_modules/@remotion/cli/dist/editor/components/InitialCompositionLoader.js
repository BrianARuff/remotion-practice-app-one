"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InitialCompositionLoader = exports.useSelectComposition = void 0;
const react_1 = require("react");
const remotion_1 = require("remotion");
const folders_1 = require("../state/folders");
const CompositionSelector_1 = require("./CompositionSelector");
const ZoomPersistor_1 = require("./ZoomPersistor");
const useSelectAsset = () => {
    const { setCanvasContent } = (0, react_1.useContext)(remotion_1.Internals.CompositionManager);
    const { setAssetFoldersExpanded } = (0, react_1.useContext)(folders_1.FolderContext);
    return (asset) => {
        setCanvasContent({ type: 'asset', asset });
        setAssetFoldersExpanded((ex) => {
            const split = asset.split('/');
            const keysToExpand = split.map((_, i) => {
                return split.slice(0, i).join('/');
            });
            const newState = {
                ...ex,
            };
            for (const key of keysToExpand) {
                newState[key] = true;
            }
            return newState;
        });
    };
};
const useSelectComposition = () => {
    const { setCompositionFoldersExpanded } = (0, react_1.useContext)(folders_1.FolderContext);
    const { setCanvasContent } = (0, react_1.useContext)(remotion_1.Internals.CompositionManager);
    return (c, push) => {
        if (push) {
            window.history.pushState({}, 'Studio', `/${c.id}`);
        }
        setCanvasContent({ type: 'composition', compositionId: c.id });
        const { folderName, parentFolderName } = c;
        if (folderName !== null) {
            setCompositionFoldersExpanded((ex) => {
                const keysToExpand = (0, CompositionSelector_1.getKeysToExpand)(folderName, parentFolderName);
                const newState = {
                    ...ex,
                };
                for (const key of keysToExpand) {
                    newState[key] = true;
                }
                return newState;
            });
        }
    };
};
exports.useSelectComposition = useSelectComposition;
const InitialCompositionLoader = () => {
    const { compositions, canvasContent, setCanvasContent } = (0, react_1.useContext)(remotion_1.Internals.CompositionManager);
    const selectComposition = (0, exports.useSelectComposition)();
    const selectAsset = useSelectAsset();
    (0, react_1.useEffect)(() => {
        if (canvasContent) {
            return;
        }
        const canvasContentFromUrl = (0, ZoomPersistor_1.deriveCanvasContentFromUrl)();
        if (canvasContentFromUrl && canvasContentFromUrl.type === 'composition') {
            const exists = compositions.find((c) => c.id === canvasContentFromUrl.compositionId);
            if (exists) {
                selectComposition(exists, false);
            }
            return;
        }
        if (canvasContentFromUrl && canvasContentFromUrl.type === 'asset') {
            selectAsset(canvasContentFromUrl.asset);
            return;
        }
        if (canvasContentFromUrl && canvasContentFromUrl.type === 'output') {
            setCanvasContent(canvasContentFromUrl);
            return;
        }
        if (compositions.length > 0) {
            selectComposition(compositions[0], true);
        }
    }, [
        compositions,
        canvasContent,
        selectComposition,
        setCanvasContent,
        selectAsset,
    ]);
    (0, react_1.useEffect)(() => {
        const onchange = () => {
            const newCanvas = (0, ZoomPersistor_1.deriveCanvasContentFromUrl)();
            if (newCanvas && newCanvas.type === 'composition') {
                const newComp = window.location.pathname.substring(1);
                const exists = compositions.find((c) => c.id === newComp);
                if (exists) {
                    selectComposition(exists, false);
                }
                return;
            }
            if (newCanvas && newCanvas.type === 'asset') {
                const staticFiles = (0, remotion_1.getStaticFiles)();
                const exists = staticFiles.find((file) => {
                    return file.name === newCanvas.asset;
                });
                if (exists) {
                    setCanvasContent(newCanvas);
                }
                return;
            }
            setCanvasContent(newCanvas);
        };
        window.addEventListener('popstate', onchange);
        return () => window.removeEventListener('popstate', onchange);
    }, [compositions, selectComposition, setCanvasContent]);
    return null;
};
exports.InitialCompositionLoader = InitialCompositionLoader;
