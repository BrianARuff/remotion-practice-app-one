"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZoomPersistor = exports.deriveCanvasContentFromUrl = exports.getZoomForComposition = void 0;
const react_1 = require("react");
const remotion_1 = require("remotion");
const timeline_zoom_1 = require("../state/timeline-zoom");
const makeKey = (composition) => {
    return `remotion.zoom.${composition}`;
};
const persistCurrentZoom = (zoom) => {
    const currentComposition = (0, exports.deriveCanvasContentFromUrl)();
    if (!currentComposition || currentComposition.type !== 'composition') {
        return;
    }
    localStorage.setItem(makeKey(currentComposition.compositionId), String(zoom));
};
const getZoomForComposition = (composition) => {
    const zoom = localStorage.getItem(makeKey(composition));
    return zoom ? Number(zoom) : 0;
};
exports.getZoomForComposition = getZoomForComposition;
const deriveCanvasContentFromUrl = () => {
    const substrings = window.location.pathname.split('/').filter(Boolean);
    const lastPart = substrings[substrings.length - 1];
    if (substrings[0] === 'assets') {
        return {
            type: 'asset',
            asset: decodeURIComponent(window.location.pathname.substring('/assets/'.length)),
        };
    }
    if (substrings[0] === 'outputs') {
        return {
            type: 'output',
            path: decodeURIComponent(window.location.pathname.substring('/outputs/'.length)),
        };
    }
    if (lastPart) {
        return {
            type: 'composition',
            compositionId: lastPart,
        };
    }
    return null;
};
exports.deriveCanvasContentFromUrl = deriveCanvasContentFromUrl;
const ZoomPersistor = () => {
    const [playing] = remotion_1.Internals.Timeline.usePlayingState();
    const { zoom } = (0, react_1.useContext)(timeline_zoom_1.TimelineZoomCtx);
    const { canvasContent } = (0, react_1.useContext)(remotion_1.Internals.CompositionManager);
    const urlState = (0, exports.deriveCanvasContentFromUrl)();
    const isActive = urlState &&
        urlState.type === 'composition' &&
        canvasContent &&
        canvasContent.type === 'composition' &&
        urlState.compositionId === canvasContent.compositionId;
    (0, react_1.useEffect)(() => {
        if (!isActive) {
            return;
        }
        persistCurrentZoom(zoom);
    }, [zoom, isActive, playing]);
    return null;
};
exports.ZoomPersistor = ZoomPersistor;
