"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.canUpdateDefaultProps = exports.updateDefaultProps = exports.updateAvailable = exports.cancelRenderJob = exports.removeRenderJob = exports.copyToClipboard = exports.openInFileExplorer = exports.subscribeToFileExistenceWatcher = exports.unsubscribeFromFileExistenceWatcher = exports.addVideoRenderJob = exports.addSequenceRenderJob = exports.addStillRenderJob = void 0;
const remotion_1 = require("remotion");
const callApi = (endpoint, body, signal) => {
    return new Promise((resolve, reject) => {
        fetch(endpoint, {
            method: 'post',
            headers: {
                'content-type': 'application/json',
            },
            signal,
            body: JSON.stringify(body),
        })
            .then((res) => res.json())
            .then((data) => {
            if (data.success) {
                resolve(data.data);
            }
            else {
                reject(new Error(data.error));
            }
        })
            .catch((err) => {
            reject(err);
        });
    });
};
const addStillRenderJob = ({ compositionId, outName, imageFormat, jpegQuality, frame, scale, verbose, chromiumOptions, delayRenderTimeout, envVariables, inputProps, offthreadVideoCacheSizeInBytes, multiProcessOnLinux, }) => {
    return callApi('/api/render', {
        compositionId,
        type: 'still',
        outName,
        imageFormat,
        jpegQuality,
        frame,
        scale,
        verbose,
        chromiumOptions,
        delayRenderTimeout,
        envVariables,
        serializedInputPropsWithCustomSchema: remotion_1.Internals.serializeJSONWithDate({
            data: inputProps,
            staticBase: window.remotion_staticBase,
            indent: undefined,
        }).serializedString,
        offthreadVideoCacheSizeInBytes,
        multiProcessOnLinux,
    });
};
exports.addStillRenderJob = addStillRenderJob;
const addSequenceRenderJob = ({ compositionId, outName, imageFormat, startFrame, endFrame, scale, verbose, chromiumOptions, delayRenderTimeout, envVariables, inputProps, concurrency, offthreadVideoCacheSizeInBytes, jpegQuality, disallowParallelEncoding, multiProcessOnLinux, }) => {
    return callApi('/api/render', {
        compositionId,
        type: 'sequence',
        outName,
        imageFormat,
        jpegQuality,
        scale,
        startFrame,
        endFrame,
        verbose,
        chromiumOptions,
        delayRenderTimeout,
        envVariables,
        concurrency,
        serializedInputPropsWithCustomSchema: remotion_1.Internals.serializeJSONWithDate({
            data: inputProps,
            staticBase: window.remotion_staticBase,
            indent: undefined,
        }).serializedString,
        offthreadVideoCacheSizeInBytes,
        disallowParallelEncoding,
        multiProcessOnLinux,
    });
};
exports.addSequenceRenderJob = addSequenceRenderJob;
const addVideoRenderJob = ({ compositionId, outName, imageFormat, jpegQuality, scale, verbose, codec, concurrency, crf, startFrame, endFrame, muted, enforceAudioTrack, proResProfile, x264Preset, pixelFormat, audioBitrate, videoBitrate, everyNthFrame, numberOfGifLoops, delayRenderTimeout, audioCodec, disallowParallelEncoding, chromiumOptions, envVariables, inputProps, offthreadVideoCacheSizeInBytes, colorSpace, multiProcessOnLinux, }) => {
    return callApi('/api/render', {
        compositionId,
        type: 'video',
        outName,
        imageFormat,
        jpegQuality,
        scale,
        verbose,
        codec,
        concurrency,
        crf,
        endFrame,
        startFrame,
        muted,
        enforceAudioTrack,
        proResProfile,
        x264Preset,
        pixelFormat,
        audioBitrate,
        videoBitrate,
        everyNthFrame,
        numberOfGifLoops,
        delayRenderTimeout,
        audioCodec,
        disallowParallelEncoding,
        chromiumOptions,
        envVariables,
        serializedInputPropsWithCustomSchema: remotion_1.Internals.serializeJSONWithDate({
            data: inputProps,
            staticBase: window.remotion_staticBase,
            indent: undefined,
        }).serializedString,
        offthreadVideoCacheSizeInBytes,
        colorSpace,
        multiProcessOnLinux,
    });
};
exports.addVideoRenderJob = addVideoRenderJob;
const unsubscribeFromFileExistenceWatcher = ({ file, clientId, }) => {
    return callApi('/api/unsubscribe-from-file-existence', { file, clientId });
};
exports.unsubscribeFromFileExistenceWatcher = unsubscribeFromFileExistenceWatcher;
const subscribeToFileExistenceWatcher = async ({ file, clientId, }) => {
    const { exists } = await callApi('/api/subscribe-to-file-existence', {
        file,
        clientId,
    });
    return exists;
};
exports.subscribeToFileExistenceWatcher = subscribeToFileExistenceWatcher;
const openInFileExplorer = ({ directory }) => {
    const body = {
        directory,
    };
    return callApi('/api/open-in-file-explorer', body);
};
exports.openInFileExplorer = openInFileExplorer;
const copyToClipboard = ({ outName }) => {
    const body = {
        outName,
    };
    return callApi('/api/copy-still-to-clipboard', body);
};
exports.copyToClipboard = copyToClipboard;
const removeRenderJob = (job) => {
    return callApi('/api/remove-render', {
        jobId: job.id,
    });
};
exports.removeRenderJob = removeRenderJob;
const cancelRenderJob = (job) => {
    return callApi('/api/cancel', {
        jobId: job.id,
    });
};
exports.cancelRenderJob = cancelRenderJob;
const updateAvailable = (signal) => {
    return callApi('/api/update-available', {}, signal);
};
exports.updateAvailable = updateAvailable;
const updateDefaultProps = (compositionId, defaultProps, enumPaths) => {
    return callApi('/api/update-default-props', {
        compositionId,
        defaultProps: remotion_1.Internals.serializeJSONWithDate({
            data: defaultProps,
            indent: undefined,
            staticBase: window.remotion_staticBase,
        }).serializedString,
        enumPaths,
    });
};
exports.updateDefaultProps = updateDefaultProps;
const canUpdateDefaultProps = (compositionId) => {
    return callApi('/api/can-update-default-props', {
        compositionId,
    });
};
exports.canUpdateDefaultProps = canUpdateDefaultProps;
