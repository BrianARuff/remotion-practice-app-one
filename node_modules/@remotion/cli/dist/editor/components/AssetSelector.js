"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetSelector = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const remotion_1 = require("remotion");
const event_source_1 = require("../../event-source");
const colors_1 = require("../helpers/colors");
const create_folder_tree_1 = require("../helpers/create-folder-tree");
const persist_open_folders_1 = require("../helpers/persist-open-folders");
const folders_1 = require("../state/folders");
const z_index_1 = require("../state/z-index");
const AssetSelectorItem_1 = require("./AssetSelectorItem");
const styles_1 = require("./Menu/styles");
const container = {
    display: 'flex',
    flexDirection: 'column',
    flex: 1,
    overflow: 'hidden',
    backgroundColor: colors_1.BACKGROUND,
};
// Some redundancy with packages/cli/src/editor/components/RenderModal/SchemaEditor/SchemaErrorMessages.tsx
const emptyState = {
    display: 'flex',
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    textAlign: 'center',
    padding: '0 12px',
};
const label = {
    color: colors_1.LIGHT_TEXT,
    lineHeight: 1.5,
    fontSize: 14,
};
const list = {
    height: '100%',
    overflowY: 'auto',
};
const AssetSelector = () => {
    const { tabIndex } = (0, z_index_1.useZIndex)();
    const { assetFoldersExpanded, setAssetFoldersExpanded } = (0, react_1.useContext)(folders_1.FolderContext);
    const [{ publicFolderExists, staticFiles }, setState] = react_1.default.useState(() => {
        return {
            staticFiles: (0, remotion_1.getStaticFiles)(),
            publicFolderExists: window.remotion_publicFolderExists,
        };
    });
    const assetTree = (0, react_1.useMemo)(() => {
        return (0, create_folder_tree_1.buildAssetFolderStructure)(staticFiles, null, assetFoldersExpanded);
    }, [assetFoldersExpanded, staticFiles]);
    (0, react_1.useEffect)(() => {
        const onUpdate = () => {
            setState({
                staticFiles: (0, remotion_1.getStaticFiles)(),
                publicFolderExists: window.remotion_publicFolderExists,
            });
        };
        const unsub = (0, event_source_1.subscribeToEvent)('new-public-folder', onUpdate);
        return () => {
            unsub();
        };
    }, []);
    const toggleFolder = (0, react_1.useCallback)((folderName, parentName) => {
        setAssetFoldersExpanded((p) => {
            var _a;
            const key = [parentName, folderName].filter(Boolean).join('/');
            const prev = (_a = p[key]) !== null && _a !== void 0 ? _a : false;
            const foldersExpandedState = {
                ...p,
                [key]: !prev,
            };
            (0, persist_open_folders_1.persistExpandedFolders)('assets', foldersExpandedState);
            return foldersExpandedState;
        });
    }, [setAssetFoldersExpanded]);
    return ((0, jsx_runtime_1.jsx)("div", { style: container, children: staticFiles.length === 0 ? (publicFolderExists ? ((0, jsx_runtime_1.jsx)("div", { style: emptyState, children: (0, jsx_runtime_1.jsxs)("div", { style: label, children: ["To add assets, place a file in the", ' ', (0, jsx_runtime_1.jsx)("code", { style: styles_1.inlineCodeSnippet, children: "public" }), " folder of your project."] }) })) : ((0, jsx_runtime_1.jsx)("div", { style: emptyState, children: (0, jsx_runtime_1.jsxs)("div", { style: label, children: ["To add assets, create a folder called", ' ', (0, jsx_runtime_1.jsx)("code", { style: styles_1.inlineCodeSnippet, children: "public" }), " in the root of your project and place a file in it."] }) }))) : ((0, jsx_runtime_1.jsx)("div", { className: "__remotion-vertical-scrollbar", style: list, children: (0, jsx_runtime_1.jsx)(AssetSelectorItem_1.AssetFolderTree, { item: assetTree, level: 0, parentFolder: null, name: null, tabIndex: tabIndex, toggleFolder: toggleFolder }) })) }));
};
exports.AssetSelector = AssetSelector;
