"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetSelectorItem = exports.AssetFolderTree = exports.AssetFolderItem = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const remotion_1 = require("remotion");
const truthy_1 = require("../../truthy");
const colors_1 = require("../helpers/colors");
const copy_text_1 = require("../helpers/copy-text");
const clipboard_1 = require("../icons/clipboard");
const file_1 = require("../icons/file");
const folder_1 = require("../icons/folder");
const InlineAction_1 = require("./InlineAction");
const layout_1 = require("./layout");
const NotificationCenter_1 = require("./Notifications/NotificationCenter");
const actions_1 = require("./RenderQueue/actions");
const ASSET_ITEM_HEIGHT = 32;
const iconStyle = {
    width: 18,
    height: 18,
    flexShrink: 0,
};
const itemStyle = {
    paddingRight: 10,
    paddingTop: 6,
    paddingBottom: 6,
    fontSize: 13,
    display: 'flex',
    textDecoration: 'none',
    cursor: 'default',
    alignItems: 'center',
    marginBottom: 1,
    appearance: 'none',
    border: 'none',
    width: '100%',
    textAlign: 'left',
    backgroundColor: colors_1.BACKGROUND,
    height: ASSET_ITEM_HEIGHT,
    userSelect: 'none',
};
const labelStyle = {
    textAlign: 'left',
    textDecoration: 'none',
    fontSize: 13,
    flex: '1 1 0%',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
};
const revealIconStyle = {
    height: 12,
    color: 'currentColor',
};
const AssetFolderItem = ({ tabIndex, item, level, parentFolder, toggleFolder }) => {
    const [hovered, setHovered] = (0, react_1.useState)(false);
    const onPointerEnter = (0, react_1.useCallback)(() => {
        setHovered(true);
    }, []);
    const onPointerLeave = (0, react_1.useCallback)(() => {
        setHovered(false);
    }, []);
    const folderStyle = (0, react_1.useMemo)(() => {
        return {
            ...itemStyle,
            paddingLeft: 4 + level * 8,
            backgroundColor: hovered ? colors_1.CLEAR_HOVER : 'transparent',
        };
    }, [hovered, level]);
    const label = (0, react_1.useMemo)(() => {
        return {
            ...labelStyle,
            color: hovered ? 'white' : colors_1.LIGHT_TEXT,
        };
    }, [hovered]);
    const onClick = (0, react_1.useCallback)(() => {
        toggleFolder(item.name, parentFolder);
    }, [item.name, parentFolder, toggleFolder]);
    const Icon = item.expanded ? folder_1.ExpandedFolderIcon : folder_1.CollapsedFolderIcon;
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("div", { style: folderStyle, onPointerEnter: onPointerEnter, onPointerLeave: onPointerLeave, tabIndex: tabIndex, title: item.name, onClick: onClick, children: (0, jsx_runtime_1.jsxs)(layout_1.Row, { children: [(0, jsx_runtime_1.jsx)(Icon, { style: iconStyle, color: hovered ? 'white' : colors_1.LIGHT_TEXT }), (0, jsx_runtime_1.jsx)(layout_1.Spacing, { x: 1 }), (0, jsx_runtime_1.jsx)("div", { style: label, children: item.name })] }) }), item.expanded ? ((0, jsx_runtime_1.jsx)(exports.AssetFolderTree, { item: item.items, name: item.name, level: level, parentFolder: parentFolder, tabIndex: tabIndex, toggleFolder: toggleFolder }, item.name)) : null] }));
};
exports.AssetFolderItem = AssetFolderItem;
const AssetFolderTree = ({ item, level, name, parentFolder, toggleFolder, tabIndex }) => {
    const combinedParents = (0, react_1.useMemo)(() => {
        return [parentFolder, name].filter(truthy_1.truthy).join('/');
    }, [name, parentFolder]);
    return ((0, jsx_runtime_1.jsxs)("div", { children: [item.folders.map((folder) => {
                return ((0, jsx_runtime_1.jsx)(exports.AssetFolderItem, { item: folder, tabIndex: tabIndex, level: level + 1, parentFolder: combinedParents, toggleFolder: toggleFolder }, folder.name));
            }), item.files.map((file) => {
                return ((0, jsx_runtime_1.jsx)(exports.AssetSelectorItem, { item: file, tabIndex: tabIndex, level: level, parentFolder: combinedParents }, file.src));
            })] }));
};
exports.AssetFolderTree = AssetFolderTree;
const AssetSelectorItem = ({ item, tabIndex, level, parentFolder }) => {
    const [hovered, setHovered] = (0, react_1.useState)(false);
    const onPointerEnter = (0, react_1.useCallback)(() => {
        setHovered(true);
    }, []);
    const { canvasContent, setCanvasContent } = (0, react_1.useContext)(remotion_1.Internals.CompositionManager);
    const selected = (0, react_1.useMemo)(() => {
        if (canvasContent && canvasContent.type === 'asset') {
            const nameWOParent = canvasContent.asset.split('/').pop();
            return nameWOParent === item.name;
        }
        return false;
    }, [canvasContent, item.name]);
    const onPointerLeave = (0, react_1.useCallback)(() => {
        setHovered(false);
    }, []);
    const onClick = (0, react_1.useCallback)(() => {
        const relativePath = parentFolder
            ? parentFolder + '/' + item.name
            : item.name;
        setCanvasContent({ type: 'asset', asset: relativePath });
        window.history.pushState({}, 'Studio', `/assets/${relativePath}`);
    }, [item.name, parentFolder, setCanvasContent]);
    const style = (0, react_1.useMemo)(() => {
        return {
            ...itemStyle,
            color: hovered || selected ? 'white' : colors_1.LIGHT_TEXT,
            backgroundColor: hovered
                ? selected
                    ? colors_1.SELECTED_BACKGROUND
                    : colors_1.CLEAR_HOVER
                : selected
                    ? colors_1.SELECTED_BACKGROUND
                    : 'transparent',
            paddingLeft: 12 + level * 8,
        };
    }, [hovered, level, selected]);
    const label = (0, react_1.useMemo)(() => {
        return {
            ...labelStyle,
            color: hovered || selected ? 'white' : colors_1.LIGHT_TEXT,
        };
    }, [hovered, selected]);
    const renderFileExplorerAction = (0, react_1.useCallback)((color) => {
        return (0, jsx_runtime_1.jsx)(folder_1.ExpandedFolderIcon, { style: revealIconStyle, color: color });
    }, []);
    const renderCopyAction = (0, react_1.useCallback)((color) => {
        return (0, jsx_runtime_1.jsx)(clipboard_1.ClipboardIcon, { style: revealIconStyle, color: color });
    }, []);
    const revealInExplorer = react_1.default.useCallback((e) => {
        e.stopPropagation();
        (0, actions_1.openInFileExplorer)({
            directory: window.remotion_publicFolderExists +
                '/' +
                parentFolder +
                '/' +
                item.name,
        }).catch((err) => {
            (0, NotificationCenter_1.sendErrorNotification)(`Could not open file: ${err.message}`);
        });
    }, [item.name, parentFolder]);
    const copyToClipboard = (0, react_1.useCallback)((e) => {
        e.stopPropagation();
        const content = `staticFile("${[parentFolder, item.name].join('/')}")`;
        (0, copy_text_1.copyText)(content)
            .then(() => {
            var _a;
            (_a = NotificationCenter_1.notificationCenter.current) === null || _a === void 0 ? void 0 : _a.addNotification({
                content: `Copied '${content}' to clipboard`,
                created: Date.now(),
                duration: 1000,
                id: String(Math.random()),
            });
        })
            .catch((err) => {
            (0, NotificationCenter_1.sendErrorNotification)(`Could not copy: ${err.message}`);
        });
    }, [item.name, parentFolder]);
    return ((0, jsx_runtime_1.jsx)(layout_1.Row, { align: "center", children: (0, jsx_runtime_1.jsxs)("div", { style: style, onPointerEnter: onPointerEnter, onPointerLeave: onPointerLeave, onClick: onClick, tabIndex: tabIndex, title: item.name, children: [(0, jsx_runtime_1.jsx)(file_1.FileIcon, { style: iconStyle, color: colors_1.LIGHT_TEXT }), (0, jsx_runtime_1.jsx)(layout_1.Spacing, { x: 1 }), (0, jsx_runtime_1.jsx)("div", { style: label, children: item.name }), hovered ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(layout_1.Spacing, { x: 0.5 }), (0, jsx_runtime_1.jsx)(InlineAction_1.InlineAction, { title: "Copy staticFile() name", renderAction: renderCopyAction, onClick: copyToClipboard }), (0, jsx_runtime_1.jsx)(layout_1.Spacing, { x: 0.5 }), (0, jsx_runtime_1.jsx)(InlineAction_1.InlineAction, { title: "Open in Explorer", renderAction: renderFileExplorerAction, onClick: revealInExplorer })] })) : null] }) }));
};
exports.AssetSelectorItem = AssetSelectorItem;
