"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionsPanel = exports.optionsSidebarTabs = exports.persistSelectedOptionsSidebarPanel = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const remotion_1 = require("remotion");
const ShortcutHint_1 = require("../../preview-server/error-overlay/remotion-overlay/ShortcutHint");
const colors_1 = require("../helpers/colors");
const DataEditor_1 = require("./RenderModal/DataEditor");
const deep_equal_1 = require("./RenderModal/SchemaEditor/deep-equal");
const RenderQueue_1 = require("./RenderQueue");
const RendersTab_1 = require("./RendersTab");
const Tabs_1 = require("./Tabs");
const container = {
    height: '100%',
    width: '100%',
    position: 'absolute',
    display: 'flex',
    flexDirection: 'column',
};
const circle = {
    width: 8,
    height: 8,
    borderRadius: 4,
};
const localStorageKey = 'remotion.sidebarPanel';
const getSelectedPanel = () => {
    const panel = localStorage.getItem(localStorageKey);
    if (panel === 'renders') {
        return 'renders';
    }
    return 'input-props';
};
const tabsContainer = {
    backgroundColor: colors_1.BACKGROUND,
};
const persistSelectedOptionsSidebarPanel = (panel) => {
    localStorage.setItem(localStorageKey, panel);
};
exports.persistSelectedOptionsSidebarPanel = persistSelectedOptionsSidebarPanel;
exports.optionsSidebarTabs = (0, react_1.createRef)();
const OptionsPanel = () => {
    const { props, updateProps } = (0, react_1.useContext)(remotion_1.Internals.EditorPropsContext);
    const [saving, setSaving] = (0, react_1.useState)(false);
    const [panel, setPanel] = (0, react_1.useState)(() => getSelectedPanel());
    const onPropsSelected = (0, react_1.useCallback)(() => {
        setPanel('input-props');
        (0, exports.persistSelectedOptionsSidebarPanel)('input-props');
    }, []);
    const onRendersSelected = (0, react_1.useCallback)(() => {
        setPanel('renders');
        (0, exports.persistSelectedOptionsSidebarPanel)('renders');
    }, []);
    (0, react_1.useImperativeHandle)(exports.optionsSidebarTabs, () => {
        return {
            selectRendersPanel: () => {
                setPanel('renders');
                (0, exports.persistSelectedOptionsSidebarPanel)('renders');
            },
        };
    }, []);
    const { compositions, canvasContent } = (0, react_1.useContext)(remotion_1.Internals.CompositionManager);
    const circleStyle = (0, react_1.useMemo)(() => {
        const onTabColor = saving ? colors_1.LIGHT_TEXT : 'white';
        return {
            ...circle,
            backgroundColor: panel === 'input-props' ? onTabColor : colors_1.LIGHT_TEXT,
            cursor: 'help',
        };
    }, [panel, saving]);
    const composition = (0, react_1.useMemo)(() => {
        if (canvasContent === null || canvasContent.type !== 'composition') {
            return null;
        }
        for (const comp of compositions) {
            if (comp.id === canvasContent.compositionId) {
                return comp;
            }
        }
        return null;
    }, [canvasContent, compositions]);
    const saveToolTip = (0, react_1.useMemo)(() => {
        return process.env.KEYBOARD_SHORTCUTS_ENABLED
            ? `Save using ${ShortcutHint_1.cmdOrCtrlCharacter}+S`
            : 'There are unsaved changes';
    }, []);
    const setInputProps = (0, react_1.useCallback)((newProps) => {
        if (composition === null) {
            return;
        }
        updateProps({
            id: composition.id,
            defaultProps: composition.defaultProps,
            newProps,
        });
    }, [composition, updateProps]);
    const actualProps = (0, react_1.useMemo)(() => {
        var _a, _b;
        if (composition === null) {
            return {};
        }
        return (_b = (_a = props[composition.id]) !== null && _a !== void 0 ? _a : composition.defaultProps) !== null && _b !== void 0 ? _b : {};
    }, [composition, props]);
    const unsavedChangesExist = (0, react_1.useMemo)(() => {
        if (composition === null || composition.defaultProps === undefined) {
            return false;
        }
        return !(0, deep_equal_1.deepEqual)(composition.defaultProps, actualProps);
    }, [actualProps, composition]);
    return ((0, jsx_runtime_1.jsxs)("div", { style: container, className: "css-reset", children: [(0, jsx_runtime_1.jsx)("div", { style: tabsContainer, children: (0, jsx_runtime_1.jsxs)(Tabs_1.Tabs, { children: [composition ? ((0, jsx_runtime_1.jsxs)(Tabs_1.Tab, { selected: panel === 'input-props', onClick: onPropsSelected, style: { justifyContent: 'space-between' }, children: ["Props", unsavedChangesExist ? ((0, jsx_runtime_1.jsx)("div", { title: saveToolTip, style: circleStyle })) : null] })) : null, (0, jsx_runtime_1.jsx)(RendersTab_1.RendersTab, { onClick: onRendersSelected, selected: panel === 'renders' })] }) }), panel === `input-props` && composition ? ((0, jsx_runtime_1.jsx)(DataEditor_1.DataEditor, { unresolvedComposition: composition, inputProps: actualProps, setInputProps: setInputProps, mayShowSaveButton: true, propsEditType: "default-props", saving: saving, setSaving: setSaving }, composition.id)) : ((0, jsx_runtime_1.jsx)(RenderQueue_1.RenderQueue, {}))] }));
};
exports.OptionsPanel = OptionsPanel;
