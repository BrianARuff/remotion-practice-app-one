"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTimelineSetInOutFramePosition = exports.useTimelineInOutFramePosition = exports.SetTimelineInOutContext = exports.TimelineInOutContext = void 0;
const react_1 = require("react");
const remotion_1 = require("remotion");
exports.TimelineInOutContext = (0, react_1.createContext)({});
exports.SetTimelineInOutContext = (0, react_1.createContext)({
    setInAndOutFrames: () => {
        throw new Error('default');
    },
});
const useTimelineInOutFramePosition = () => {
    var _a, _b, _c, _d;
    const videoConfig = remotion_1.Internals.useUnsafeVideoConfig();
    const state = (0, react_1.useContext)(exports.TimelineInOutContext);
    if (!videoConfig) {
        return { inFrame: null, outFrame: null };
    }
    const maxFrame = videoConfig.durationInFrames - 1;
    const actualInFrame = (_b = (_a = state[videoConfig.id]) === null || _a === void 0 ? void 0 : _a.inFrame) !== null && _b !== void 0 ? _b : null;
    const actualOutFrame = (_d = (_c = state[videoConfig.id]) === null || _c === void 0 ? void 0 : _c.outFrame) !== null && _d !== void 0 ? _d : null;
    return {
        inFrame: actualInFrame === null
            ? null
            : actualInFrame >= maxFrame
                ? null
                : actualInFrame,
        outFrame: actualOutFrame === null
            ? null
            : actualOutFrame >= maxFrame
                ? null
                : actualOutFrame,
    };
};
exports.useTimelineInOutFramePosition = useTimelineInOutFramePosition;
const useTimelineSetInOutFramePosition = () => {
    const { setInAndOutFrames } = (0, react_1.useContext)(exports.SetTimelineInOutContext);
    return { setInAndOutFrames };
};
exports.useTimelineSetInOutFramePosition = useTimelineSetInOutFramePosition;
