"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeRetryPayload = void 0;
const remotion_1 = require("remotion");
const makeRetryPayload = (job) => {
    var _a, _b, _c, _d, _e;
    const defaults = window.remotion_renderDefaults;
    if (!defaults) {
        throw new Error('defaults not set');
    }
    if (job.type === 'still') {
        return {
            type: 'render',
            compositionId: job.compositionId,
            initialFrame: job.frame,
            initialStillImageFormat: job.imageFormat,
            initialVideoImageFormat: defaults.videoImageFormat,
            initialJpegQuality: (_a = job.jpegQuality) !== null && _a !== void 0 ? _a : defaults.jpegQuality,
            initialScale: job.scale,
            initialVerbose: job.verbose,
            initialConcurrency: defaults.concurrency,
            maxConcurrency: defaults.maxConcurrency,
            minConcurrency: defaults.minConcurrency,
            initialMuted: defaults.muted,
            initialEnforceAudioTrack: defaults.enforceAudioTrack,
            initialProResProfile: defaults.proResProfile,
            initialx264Preset: defaults.x264Preset,
            initialPixelFormat: defaults.pixelFormat,
            initialAudioBitrate: defaults.audioBitrate,
            initialVideoBitrate: defaults.videoBitrate,
            initialEveryNthFrame: defaults.everyNthFrame,
            initialNumberOfGifLoops: defaults.numberOfGifLoops,
            initialDelayRenderTimeout: job.delayRenderTimeout,
            defaultConfigurationAudioCodec: defaults.audioCodec,
            initialEnvVariables: job.envVariables,
            initialDisableWebSecurity: job.chromiumOptions.disableWebSecurity,
            initialOpenGlRenderer: job.chromiumOptions.gl,
            initialHeadless: job.chromiumOptions.headless,
            initialIgnoreCertificateErrors: job.chromiumOptions.ignoreCertificateErrors,
            defaultProps: remotion_1.Internals.deserializeJSONWithCustomFields(job.serializedInputPropsWithCustomSchema),
            inFrameMark: null,
            outFrameMark: null,
            initialOffthreadVideoCacheSizeInBytes: job.offthreadVideoCacheSizeInBytes,
            initialColorSpace: defaults.colorSpace,
            initialMultiProcessOnLinux: job.multiProcessOnLinux,
            defaultConfigurationVideoCodec: defaults.codec,
        };
    }
    if (job.type === 'sequence') {
        return {
            type: 'render',
            initialFrame: 0,
            compositionId: job.compositionId,
            initialVideoImageFormat: defaults.videoImageFormat,
            initialJpegQuality: (_b = job.jpegQuality) !== null && _b !== void 0 ? _b : defaults.jpegQuality,
            initialScale: job.scale,
            initialVerbose: job.verbose,
            initialConcurrency: defaults.concurrency,
            maxConcurrency: defaults.maxConcurrency,
            minConcurrency: defaults.minConcurrency,
            initialMuted: defaults.muted,
            initialEnforceAudioTrack: defaults.enforceAudioTrack,
            initialProResProfile: defaults.proResProfile,
            initialx264Preset: defaults.x264Preset,
            initialPixelFormat: defaults.pixelFormat,
            initialAudioBitrate: defaults.audioBitrate,
            initialVideoBitrate: defaults.videoBitrate,
            initialEveryNthFrame: defaults.everyNthFrame,
            initialNumberOfGifLoops: defaults.numberOfGifLoops,
            initialDelayRenderTimeout: job.delayRenderTimeout,
            initialEnvVariables: job.envVariables,
            initialDisableWebSecurity: job.chromiumOptions.disableWebSecurity,
            initialOpenGlRenderer: job.chromiumOptions.gl,
            initialHeadless: job.chromiumOptions.headless,
            initialIgnoreCertificateErrors: job.chromiumOptions.ignoreCertificateErrors,
            defaultProps: remotion_1.Internals.deserializeJSONWithCustomFields(job.serializedInputPropsWithCustomSchema),
            initialStillImageFormat: defaults.stillImageFormat,
            inFrameMark: job.startFrame,
            outFrameMark: job.endFrame,
            initialOffthreadVideoCacheSizeInBytes: job.offthreadVideoCacheSizeInBytes,
            initialColorSpace: defaults.colorSpace,
            initialMultiProcessOnLinux: job.multiProcessOnLinux,
            defaultConfigurationVideoCodec: defaults.codec,
            defaultConfigurationAudioCodec: defaults.audioCodec,
        };
    }
    if (job.type === 'video') {
        return {
            type: 'render',
            compositionId: job.compositionId,
            initialStillImageFormat: defaults.stillImageFormat,
            initialVideoImageFormat: job.imageFormat,
            initialJpegQuality: (_c = job.jpegQuality) !== null && _c !== void 0 ? _c : defaults.jpegQuality,
            initialScale: job.scale,
            initialVerbose: job.verbose,
            initialFrame: 0,
            initialConcurrency: job.concurrency,
            maxConcurrency: defaults.maxConcurrency,
            minConcurrency: defaults.minConcurrency,
            initialMuted: job.muted,
            initialEnforceAudioTrack: job.enforceAudioTrack,
            initialProResProfile: (_d = job.proResProfile) !== null && _d !== void 0 ? _d : defaults.proResProfile,
            initialx264Preset: (_e = job.x264Preset) !== null && _e !== void 0 ? _e : defaults.x264Preset,
            initialPixelFormat: job.pixelFormat,
            initialAudioBitrate: job.audioBitrate,
            initialVideoBitrate: job.videoBitrate,
            initialEveryNthFrame: job.everyNthFrame,
            initialNumberOfGifLoops: job.numberOfGifLoops,
            initialDelayRenderTimeout: job.delayRenderTimeout,
            initialEnvVariables: job.envVariables,
            initialDisableWebSecurity: job.chromiumOptions.disableWebSecurity,
            initialOpenGlRenderer: job.chromiumOptions.gl,
            initialHeadless: job.chromiumOptions.headless,
            initialIgnoreCertificateErrors: job.chromiumOptions.ignoreCertificateErrors,
            defaultProps: remotion_1.Internals.deserializeJSONWithCustomFields(job.serializedInputPropsWithCustomSchema),
            inFrameMark: job.startFrame,
            outFrameMark: job.endFrame,
            initialOffthreadVideoCacheSizeInBytes: job.offthreadVideoCacheSizeInBytes,
            initialColorSpace: job.colorSpace,
            initialMultiProcessOnLinux: job.multiProcessOnLinux,
            defaultConfigurationVideoCodec: defaults.codec,
            defaultConfigurationAudioCodec: job.audioCodec,
        };
    }
    throw new Error(`Job ${JSON.stringify(job)} Not implemented`);
};
exports.makeRetryPayload = makeRetryPayload;
