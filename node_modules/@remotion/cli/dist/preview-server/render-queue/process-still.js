"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processStill = void 0;
const convert_entry_point_to_serve_url_1 = require("../../convert-entry-point-to-serve-url");
const get_cli_options_1 = require("../../get-cli-options");
const still_1 = require("../../render-flows/still");
const processStill = async ({ job, remotionRoot, entryPoint, onProgress, addCleanupCallback, }) => {
    if (job.type !== 'still') {
        throw new Error('Expected still job');
    }
    const { publicDir, browserExecutable, port, browser, puppeteerTimeout } = await (0, get_cli_options_1.getCliOptions)({
        isLambda: false,
        type: 'still',
        remotionRoot,
    });
    const fullEntryPoint = (0, convert_entry_point_to_serve_url_1.convertEntryPointToServeUrl)(entryPoint);
    await (0, still_1.renderStillFlow)({
        remotionRoot,
        browser,
        browserExecutable,
        chromiumOptions: job.chromiumOptions,
        entryPointReason: 'same as Studio',
        envVariables: job.envVariables,
        height: null,
        fullEntryPoint,
        serializedInputPropsWithCustomSchema: job.serializedInputPropsWithCustomSchema,
        overwrite: true,
        port,
        publicDir,
        puppeteerTimeout,
        jpegQuality: job.jpegQuality,
        remainingArgs: [],
        scale: job.scale,
        stillFrame: job.frame,
        width: null,
        compositionIdFromUi: job.compositionId,
        imageFormatFromUi: job.imageFormat,
        logLevel: job.verbose ? 'verbose' : 'info',
        onProgress,
        indent: true,
        addCleanupCallback,
        cancelSignal: job.cancelToken.cancelSignal,
        outputLocationFromUi: job.outName,
        offthreadVideoCacheSizeInBytes: job.offthreadVideoCacheSizeInBytes,
    });
};
exports.processStill = processStill;
