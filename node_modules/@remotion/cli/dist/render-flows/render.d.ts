import type { AudioCodec, Browser, BrowserExecutable, CancelSignal, ChromiumOptions, Codec, ColorSpace, Crf, FfmpegOverrideFn, FrameRange, LogLevel, PixelFormat, ProResProfile, VideoImageFormat, X264Preset } from '@remotion/renderer';
import type { Loop } from '../config/number-of-gif-loops';
import type { JobProgressCallback } from '../preview-server/render-queue/job';
export declare const renderVideoFlow: ({ remotionRoot, fullEntryPoint, indent, logLevel, browserExecutable, browser, chromiumOptions, scale, shouldOutputImageSequence, publicDir, envVariables, puppeteerTimeout, port, height, width, remainingArgs, compositionIdFromUi, entryPointReason, overwrite, quiet, concurrency, frameRange, everyNthFrame, outputLocationFromUI, jpegQuality, onProgress, addCleanupCallback, cancelSignal, crf, uiCodec, uiImageFormat, ffmpegOverride, audioBitrate, muted, enforceAudioTrack, proResProfile, x264Preset, pixelFormat, videoBitrate, numberOfGifLoops, audioCodec, serializedInputPropsWithCustomSchema, disallowParallelEncoding, offthreadVideoCacheSizeInBytes, colorSpace, }: {
    remotionRoot: string;
    fullEntryPoint: string;
    entryPointReason: string;
    browserExecutable: BrowserExecutable;
    chromiumOptions: ChromiumOptions;
    logLevel: LogLevel;
    browser: Browser;
    scale: number;
    indent: boolean;
    shouldOutputImageSequence: boolean;
    publicDir: string | null;
    serializedInputPropsWithCustomSchema: string;
    envVariables: Record<string, string>;
    puppeteerTimeout: number;
    port: number | null;
    height: number | null;
    width: number | null;
    remainingArgs: string[];
    compositionIdFromUi: string | null;
    outputLocationFromUI: string | null;
    overwrite: boolean;
    quiet: boolean;
    concurrency: number | string | null;
    frameRange: FrameRange | null;
    everyNthFrame: number;
    jpegQuality: number | undefined;
    onProgress: JobProgressCallback;
    addCleanupCallback: (cb: () => void) => void;
    crf: Crf | null;
    cancelSignal: CancelSignal | null;
    uiCodec: Codec | null;
    uiImageFormat: VideoImageFormat | null;
    ffmpegOverride: FfmpegOverrideFn;
    audioBitrate: string | null;
    videoBitrate: string | null;
    muted: boolean;
    enforceAudioTrack: boolean;
    proResProfile: ProResProfile | undefined;
    x264Preset: X264Preset | undefined;
    pixelFormat: PixelFormat;
    numberOfGifLoops: Loop;
    audioCodec: AudioCodec | null;
    disallowParallelEncoding: boolean;
    offthreadVideoCacheSizeInBytes: number | null;
    colorSpace: ColorSpace;
}) => Promise<void>;
