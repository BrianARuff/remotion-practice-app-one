import type { BrowserExecutable, ChromiumOptions, HeadlessBrowser, LogLevel, RemotionServer } from '@remotion/renderer';
import type { VideoConfig } from 'remotion';
export declare const getCompositionId: ({ args, compositionIdFromUi, serializedInputPropsWithCustomSchema, puppeteerInstance, envVariables, timeoutInMilliseconds, chromiumOptions, port, browserExecutable, serveUrlOrWebpackUrl, logLevel, indent, server, offthreadVideoCacheSizeInBytes, }: {
    args: string[];
    compositionIdFromUi: string | null;
    serializedInputPropsWithCustomSchema: string;
    puppeteerInstance: HeadlessBrowser | undefined;
    envVariables: Record<string, string>;
    timeoutInMilliseconds: number;
    chromiumOptions: ChromiumOptions;
    port: number | null;
    browserExecutable: BrowserExecutable;
    serveUrlOrWebpackUrl: string;
    logLevel: LogLevel;
    indent: boolean;
    server: RemotionServer;
    offthreadVideoCacheSizeInBytes: number | null;
}) => Promise<{
    compositionId: string;
    reason: string;
    config: VideoConfig;
    argsAfterComposition: string[];
}>;
